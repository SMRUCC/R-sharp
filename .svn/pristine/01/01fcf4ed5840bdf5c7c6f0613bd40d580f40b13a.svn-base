<?xml version="1.0"?>
<doc>
<assembly>
<name>
ShoalShell.Plugins.HtmlHelpServer
</name>
</assembly>
<members>
<member name="T:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources._404">
<summary>
  Looks up a localized string similar to &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Page Not Found :(&lt;/title&gt;&lt;style&gt;::-moz-selection {
        background: #b3d4fc;
        text-shadow: none;
      }

      ::selection {
        background: #b3d4fc;
        text-shadow: none;
      }

      html {
        padding: 30px 10px;
        font-size: 20px;
        line-height: 1.4;
        color: #737373;
        background: #f0f0f0;
        -webkit-text-size-adjust: 100%;
        -ms-text-size-adjust: 100%;
      }

      html,
    [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources.gpl">
<summary>
  Looks up a localized string similar to                     GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away yo [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.My.Resources.Resources.Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.NotificationIcon.Main(System.String[])">
 <summary>Program entry point.</summary>
 <param name="args">Command Line Arguments</param>
</member>
<member name="T:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions">
 <summary>
 Common extension methods library for convenient the programming job.
 </summary>
 <remarks></remarks>  
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.As``1(System.Object)">
 <summary>
 DirectCast(obj, T)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.PrintException``1(``0)">
 <summary>
 The function will print the exception details information on the standard <see cref="T:System.Console"/>, <see cref="T:System.Diagnostics.Debug"/> console, and system <see cref="T:System.Diagnostics.Trace"/> console.
 (分别在标准终端，调试终端，系统调试终端之中打印出错误信息)
 </summary>
 <typeparam name="ex"></typeparam>
 <param name="exception"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CopyTypeDef``2(System.Collections.Generic.Dictionary{``0,``1})">
 <summary>
 
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="source">仅仅是起到类型复制的作用</param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CopyTypeDef``1(System.Collections.Generic.List{``0})">
 <summary>
 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="IList">仅仅是起到类型复制的作用</param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CliPath(System.String)">
 <summary>
 假若命令行之中的文件名参数之中含有空格的话，则可能会造成错误，需要添加一个双引号来消除歧义
 </summary>
 <param name="Path"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.NormalizeXMLString(System.String)">
 <summary>
 对Xml文件之中的特殊字符进行转义处理
 </summary>
 <param name="str"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
 <summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
 <typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
 <param name="Property">Target property object.(目标属性对象)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetAttribute``1(System.Reflection.PropertyInfo)">
 <summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
 <typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
 <param name="Property">Target property object.(目标属性对象)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ToFileURL(System.String)">
 <summary>
 Gets the URL type file path.(获取URL类型的文件路径)
 </summary>
 <param name="Path"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetAnonymousTypeList``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 You can using this method to create a empty list for the specific type of anonymous type object.
 (使用这个方法获取得到匿名类型的列表数据集合对象)
 </summary>
 <typeparam name="TAnonymousType"></typeparam>
 <param name="typedef">The temp object which was created anonymous.(匿名对象的集合)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.StringSplit(System.String,System.String,System.Boolean)">
 <summary>
 This method is used to replace most calls to the Java String.split method.
 </summary>
 <param name="source"></param>
 <param name="regexDelimiter"></param>
 <param name="trimTrailingEmptyStrings"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetDelegateInvokeEntryPoint(System.Object)">
 <summary>
 Get the method reflection entry point for a anonymous lambda expression.(当函数返回Nothing的时候说明目标对象不是一个函数指针)
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ToMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>
 Convert the data collection into a matrix value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="collection">The elements number in each collection should be agreed!(要求集合之中的每一列之中的数据的元素数目都相等)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MatrixToVectorList``1(``0[0:,0:])">
 <summary>
 Convert the matrix data into a collection of collection data type.(将矩阵对象转换为集合的集合的类型)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="MAT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SlideWindowHandle`1">
 <summary>
 滑窗操作的数据模型
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SlideWindowHandle`1.p">
 <summary>
 在创建的滑窗的队列之中当前的窗口对象的位置
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SlideWindowHandle`1.Left">
 <summary>
 当前窗口在原始的序列之中的左端起始位点
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SlideWindowHandle`1.Length">
 <summary>
 窗口长度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CreateSlideWindows``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
 <summary>
 Create a collection of slide Windows data for the target collection object.(创建一个滑窗集合)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="data"></param>
 <param name="slideWindowSize">窗口的大小</param>
 <param name="offset">在序列之上移动的步长</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.NIL">
 <summary>
 Chr(0): NULL char
 </summary>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SplitCollection``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 将目标集合之中的数据按照<paramref name="splitCount"></paramref>参数分配到子集合之中，这个函数之中不能够使用并行化计数，以保证元素之间的相互原有的顺序
 </summary>
 <typeparam name="T"></typeparam>
 <param name="collection"></param>
 <param name="splitCount">每一个子集合之中的元素的数目</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Invoke(System.Diagnostics.Process)">
 <summary>
 本方法会执行外部命令并等待其执行完毕，函数返回状态值
 </summary>
 <param name="Process"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.RandomDouble">
 <summary>
 Gets a random number in the region of [0,1]. (获取一个[0,1]区间之中的随机数)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.FileExists(System.String)">
 <summary>
 Check if the target file object is exists on your file system or not.(这个函数也会自动检查目标<paramref name="path"/>参数是否为空)
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.FileOpened(System.String)">
 <summary>
 检测文件是否已经被其他程序打开使用之中
 </summary>
 <param name="FileName">目标文件</param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetElementCounts``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Gets the element counts in the target data collection, if the collection object is nothing or empty 
 then this function will returns ZERO, others returns Collection.Count.(返回一个数据集合之中的元素的数目，
 假若这个集合是空值或者空的，则返回0，其他情况则返回Count拓展函数的结果) 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetString(System.String,System.Char)">
 <summary>
 获取""或者其他字符所包围的字符串的值
 </summary>
 <param name="s"></param>
 <param name="wrapper"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Free``1(``0@)">
 <summary>
 Free this variable pointer in the memory.(销毁本对象类型在内存之中的指针)
 </summary>
 <typeparam name="T">假若该对象类型实现了<see cref="T:System.IDisposable"></see>接口，则函数还会在销毁前调用该接口的销毁函数</typeparam>
 <param name="obj"></param>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Pause(System.String)">
 <summary>
 Pause the console program.
 </summary>
 <param name="Prompted"></param>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ParseDouble(System.String)">
 <summary>
 使用正则表达式解析目标字符串对象之中的一个实数
 </summary>
 <param name="s"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ParseDateTime(System.String)">
 <summary>
 空字符串会返回空的日期
 </summary>
 <param name="s"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ReadUltraLargeTextFile(System.String,System.Text.Encoding)">
 <summary>
 当所被读取的文本文件的大小超过了<see cref="T:System.Text.StringBuilder"></see>的上限的时候，就需要使用本方法进行读取操作了。<paramref name="Path">目标文件</paramref>必须是已经存在的文件
 </summary>
 <param name="Path">目标文件必须是已经存在的文件</param>
 <param name="Encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Collection2GenericIEnumerable(System.Type)">
 <summary>
 Try convert the type specific collection data type into a generic enumerable collection data type.(尝试将目标集合类型转换为通用的枚举集合类型)
 </summary>
 <param name="Type">The type specific collection data type.(特定类型的集合对象类型，当然也可以是泛型类型)</param>
 <returns>If the target data type is not a collection data type then the original data type will be returns and the function displays a warning message.</returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SavePackage(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
 <summary>
 Save the binary data into the filesystem.(保存二进制数据包值文件系统)
 </summary>
 <param name="ChunkBuffer">The binary bytes data of the target package's data.(目标二进制数据)</param>
 <param name="SavePath">The saved file path of the target binary data chunk.(目标二进制数据包所要进行保存的文件名路径)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.InvokeSet``2(``0,System.String,``1)">
 <summary>
 如果发生错误，则原有的对象<paramref name="obj"/>不会被修改
 </summary>
 <typeparam name="T"></typeparam>
 <typeparam name="Tvalue"></typeparam>
 <param name="obj"></param>
 <param name="Name">可以使用NameOf得到需要进行修改的属性名称</param>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.InvokeSet``1(``0,System.Action)">
 <summary>
 Execute a property modify method and then return the target instance object.(修改目标对象的属性之后返回目标对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.InvokeSet``1(``0@,``0)">
 <summary>
 Value assignment to the target variable. 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="var"></param>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
 <param name="CopyTo"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ShadowCopy``1(``0,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
 <summary>
 Copy the source value directly to the target variable and then return the source value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ModifyValue``1(System.Reflection.PropertyInfo,``0,System.Func{System.Object,System.Object})">
 <summary>
 Modify target object property value using a <paramref name="valueModifier">specific value provider</paramref> and then return original instance object.
 (修改目标对象的属性之后返回目标对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.FlushMemory">
 <summary>
 Rabbish collection to free the junk memory.(垃圾回收)
 </summary>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MatrixToVector``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>
 Merge the target array collection into one collection.(将目标数组的集合合并为一个数组)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MatrixToUltraLargeVector``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 Merge the target array collection into one collection.(将目标数组的集合合并为一个数组，这个方法是提供给超大的集合的，即元素的数目非常的多的，即超过了<see cref="T:System.Int32"></see>的上限值)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.AddRange``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Add a linked list of a collection of specific type of data.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="list"></param>
 <param name="data"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MatrixTranspose``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 矩阵转置： 将矩阵之中的元素进行行列位置的互换
 </summary>
 <typeparam name="T">矩阵之中的元素类型</typeparam>
 <param name="MAT">为了方便理解和使用，矩阵使用数组的数组来表示的</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MatrixTransposeIgnoredDimensionAgreement``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 将矩阵之中的元素进行行列位置的互换，请注意，假若长度不一致的话，会按照最短的元素来转置，故而使用本函数可能会造成一些信息的丢失
 </summary>
 <typeparam name="T"></typeparam>
 <param name="MAT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Intersection(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
 <summary>
 求交集
 </summary>
 <param name="Chunkbuffer"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.StdError(System.Collections.Generic.IEnumerable{System.Double})">
 <summary>
 求取该数据集的标准差
 </summary>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Description(System.Enum)">
 <summary>
 Get the description data from a enum type value, if the target have no <see cref="T:System.ComponentModel.DescriptionAttribute"></see> attribute data 
 then function will return the string value from the ToString() function.
 </summary>
 <param name="e"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.TrimNull``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Remove all of the null object in the target object collection
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.RandomizeElements``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Return a collection with randomize element position in <paramref name="Collection">the original collection</paramref>.(从原有序序列中获取一个随机元素的序列)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetFirstValue``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Get the value of the first element, if the collection is null or empty then return nothing as default value
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CopyTo``1(``0,``0@)">
 <summary>
 Copy the value in <paramref name="value"></paramref> into target variable <paramref name="target"></paramref> and then return the target variable.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="value"></param>
 <param name="target"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.TakeRandomly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 随机的在目标集合中选取指定数目的子集合
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <param name="Counts">当目标数目大于或者等于目标集合的数目的时候，则返回目标集合</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ToStringArray``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Convert target object type collection into a string array using the Object.ToString() interface function.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Union(System.String[],System.String[])">
 <summary>
 Get a sub set of the string data which is contains in both collection <paramref name="strArray1"></paramref> and <paramref name="strArray2"></paramref>
 </summary>
 <param name="strArray1"></param>
 <param name="strArray2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SwapWith``1(``0@,``0@)">
 <summary>
 Swap the value in the two variables.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj1"></param>
 <param name="obj2"></param>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SwapItem``1(System.Collections.Generic.List{``0}@,``0,``0)">
 <summary>
 Swap the two item position in the target <paramref name="List">list</paramref>.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="obj_1"></param>
 <param name="obj_2"></param>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.MoveNext(System.Int32@)">
 <summary>
 <paramref name="p"></paramref> plus one and then return its previous value.
 </summary>
 <param name="p"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Sequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 获取某一个集合的下标的集合
 </summary>
 <typeparam name="T">集合中的元素为任意类型的</typeparam>
 <param name="Collection">目标集合对象</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Takes``1(System.Collections.Generic.IEnumerable{``0},System.Int32[],System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <param name="IndexCollection">所要获取的目标对象的下表的集合</param>
 <param name="reversedSelect">是否为反向选择</param>
 <param name="OffSet">当进行反选的时候，本参数将不会起作用</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.InternalReversedTakeSelected``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
 <summary>
 反选，即将所有不出现在<paramref name="indexs"></paramref>之中的元素都选取出来
 </summary>
 <typeparam name="T"></typeparam>
 <param name="coll"></param>
 <param name="indexs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Sequence(System.Int32)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n">大于或者等于0的一个数，当小于0的时候会出错</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Sequence(System.Int64)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Sequence(System.UInt32)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Join``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 向一个列表对象之中批量添加一个对象的集合
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
 <summary>
 将目标键值对对象的集合转换为一个字典对象
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 This object collection is a null object or contains zero count items.(判断某一个对象集合是否为空)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.IsNullOrEmpty(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 判断这个字符串集合是否为空集合，函数会首先按照常规的集合为空进行判断，然后假若不为空的话，假若只含有一个元素并且该唯一的元素的值为空字符串，则也认为这个字符串集合为空集合
 </summary>
 <param name="stringCollection"></param>
 <param name="strict">FALSE 为非严谨，只进行常规判断，TRUE 为严谨模式，会假若不为空的话，假若只含有一个元素并且该唯一的元素的值为空字符串，则也认为这个字符串集合为空集合</param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SaveTo(System.String,System.String,System.Text.Encoding)">
 <summary>
 Write the text file data into a file which was specific by the <paramref name="Path"></paramref> value, 
 this function not append the new data onto the target file.
 (将目标文本字符串写入到一个指定路径的文件之中，但是不会在文件末尾追加新的数据)
 </summary>
 <param name="Path"></param>
 <param name="TextValue"></param>
 <param name="Encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SaveTo(System.String,System.String,System.Boolean,System.Text.Encoding)">
 <summary>
 由于可能会产生数据污染，所以并不推荐使用这个函数来写文件
 </summary>
 <param name="TextValue"></param>
 <param name="Path"></param>
 <param name="WaitForRelease">当其他的进程对目标文件产生占用的时候，函数是否等待其他进程的退出释放文件句柄之后在进行数据的写入</param>
 <param name="Encoding"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.IsTextFile(System.String,System.Int32)">
 <summary>
 判断是否是文本文件
 </summary>
 <param name="FilePath">文件全路径名称</param>
 <returns>是返回True，不是返回False</returns>
 <param name="ChunkLength">文件检查的长度，假若在这个长度内都没有超过null的阈值数，则认为该文件为文本文件，默认区域长度为4KB</param>
 <remarks>2012年12月5日</remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.SaveTo(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)">
 <summary>
 将目标字符串数据全部写入到文件之中，当所写入的文件位置之上没有父文件夹存在的时候，会自动创建文件夹
 </summary>
 <param name="array"></param>
 <param name="path"></param>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetXml``1(``0)">
 <summary>
 Serialization the target object type into a XML document.(将一个类对象序列化为XML文档)
 </summary>
 <typeparam name="T">The type of the target object data should be a class object.(目标对象类型必须为一个Class)</typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.LoadXml``1(System.String,System.Text.Encoding,System.Boolean)">
 <summary>
 从文件之中加载XML之中的数据至一个对象类型之中
 </summary>
 <typeparam name="T"></typeparam>
 <param name="XmlFile">XML文件的文件路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Serialize``1(``0,System.String)">
 <summary>
 使用二进制序列化保存一个对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Load``1(System.String)">
 <summary>
 使用反二进制序列化从指定的文件之中加载一个对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CreateObjectFromXml``1(System.String,System.Boolean)">
 <summary>
 Generate a specific type object from a xml document stream.(使用一个XML文本内容创建一个XML映射对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Xml">This parameter value is the document text of the xml file, not the file path of the xml file.(是Xml文件的文件内容而非文件路径)</param>
 <param name="ThrowEx">Should this program throw the exception when the xml deserialization error happens? 
 if False then this function will returns a null value instead of throw exception.
 (在进行Xml反序列化的时候是否抛出错误，默认抛出错误，否则返回一个空对象)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.CreateObjectFromXmlSegment``1(System.String)">
 <summary>
 使用一个XML文本内容的一个片段创建一个XML映射对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Xml">是Xml文件的文件内容而非文件路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.π(System.Collections.Generic.IEnumerable{System.Double})">
 <summary>
 获取一个实数集合中所有元素的积
 </summary>
 <param name="Elements"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.ILLEGAL_PATH_CHARACTERS_ENUMERATION">
 <summary>
 枚举所有非法的路径字符
 </summary>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.NormalizePathString(System.String,System.Boolean)">
 <summary>
 将目标字符串之中的非法的字符替换为"_"符号以成为正确的文件名字符串
 </summary>
 <param name="str"></param>
 <param name="OnlyASCII">当本参数为真的时候，仅26个字母，0-9数字和下划线_以及小数点可以被保留下来</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Removes``1(System.Collections.Generic.List{``0}@,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Remove all of the element in the <paramref name="collection"></paramref> from target <paramref name="List">list</paramref>
 </summary> 
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="collection"></param>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.GetValue(System.String)">
 <summary>
 获取两个尖括号之间的内容
 </summary>
 <param name="strData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.Get_PageContent(System.String,System.UInt32,System.Boolean)">
 <summary>
 Get the html page content from a website request or a html file on the local filesystem.
 </summary>
 <param name="url">web http request url or a file path handle</param>
 <param name="RequestTimeOut">发生错误的时候的重试的次数</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.SharedExtensions.DownloadFile(System.String,System.String)">
 <summary>
 download the file from <paramref name="strUrl"></paramref> to <paramref name="SavedPath">local file</paramref>.
 </summary>
 <param name="strUrl"></param>
 <param name="SavedPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpServer.__httpProcessor(System.Net.Sockets.TcpClient)">
 <summary>
 New HttpProcessor(Client, Me) with {._404Page = "...."}
 </summary>
 <param name="client"></param>
 <returns></returns>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpServer.handleGETRequest(ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpProcessor)">
 <summary>
 
 </summary>
 <param name="p"></param>
 <example>
 
 If p.http_url.Equals("/Test.png") Then
     Dim fs As Stream = File.Open("../../Test.png", FileMode.Open)

     p.writeSuccess("image/png")
     fs.CopyTo(p.outputStream.BaseStream)
     p.outputStream.BaseStream.Flush()
 End If

  Console.WriteLine("request: {0}", p.http_url)
 
  p.writeSuccess()
  p.outputStream.WriteLine("&lt;html>&lt;body>&lt;h1>Shoal SystemsBiology Shell Language&lt;/h1>")
  p.outputStream.WriteLine("Current Time: " &amp; DateTime.Now.ToString())
  p.outputStream.WriteLine("url : {0}", p.http_url)

  p.outputStream.WriteLine("&lt;form method=post action=/local_wiki>")
  p.outputStream.WriteLine("&lt;input type=text name=SearchValue value=Keyword>")
  p.outputStream.WriteLine("&lt;input type=submit name=Invoker value=""Search"">")
  p.outputStream.WriteLine("&lt;/form>")
 
 </example>
</member>
<member name="F:ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpProcessor.MAX_POST_SIZE">
 <summary>
 10MB
 </summary>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpProcessor.HandlePOSTRequest">
 <summary>
 This post data processing just reads everything into a memory stream.
 this is fine for smallish things, but for large stuff we should really
 hand an input stream to the request processor. However, the input stream 
 we hand him needs to let him see the "end of the stream" at this content 
 length, because otherwise he won't know when he's seen it all! 
 </summary>
 <remarks></remarks>
</member>
<member name="M:ShoalShell.Plugins.HtmlHelpServer.Bend.Util.HttpProcessor.writeFailure(System.String)">
 <summary>
 404
 </summary>
</member>
</members>
</doc>
