<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.Architecture.Framework
</name>
</assembly>
<members>
<member name="M:Microsoft.VisualBasic.SecurityString.VerifyMd5Hash(System.String,System.String)">
	<summary>
 Verify a hash against a string. 
 </summary>
	<param name="input"></param>
	<param name="comparedHash"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.Name">
	<summary>
 The command name that parse from the input command line.
 (从输入的命令行中所解析出来的命令的名称)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.Tokens">
	<summary>
 The command tokens that were parsed from the input commandline.
 (从所输入的命令行之中所解析出来的命令参数单元)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.Parameters">
	<summary>
 The parameters in the commandline without the first token of the command name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.str_Original_argvs">
	<summary>
 Get the original command line string.(获取所输入的命令行对象的原始的字符串)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.Item(System.String)">
	<summary>
 开关的名称是不区分大小写的
 </summary>
	<param name="SwitchName"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.CommandLine.ToString">
	<summary>
 返回所传入的命令行的原始字符串
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.CommandLine.CreateSwitchValues(System.String[])">
	<summary>
	</summary>
	<param name="data">个数为偶数的</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.CommandLine.CommandLine.SPLIT_REGX_EXPRESSION">
	<summary>
 A regex expression string that use for split the commandline text.
 (用于分析命令行字符串的正则表达式)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.CommandLine.GetTokens(System.String)">
	<summary>
 Try parse the argument tokens which comes from the user input commandline string. 
 (尝试从用户输入的命令行字符串之中解析出所有的参数)
 </summary>
	<param name="CommandLine"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.CommandLine.TryParse(System.String,System.String,System.Char)">
	<summary>
 尝试从输入的语句之中解析出词法单元，注意，这个函数不是处理从操作系统所传递进入的命令行语句
 </summary>
	<param name="CommandLine"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.CommandLine.CommandLine.InteropService.ExecutableAssembly">
	<summary>
 Assembly path for the target invoked program.
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.CommandLine.Count">
	<summary>
 Get the switch counts in this commandline object.(获取本命令行对象中的所定义的开关的数目)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.CommandLine">
	<summary>
 A command line object that parse from the user input commandline string.
 (从用户所输入的命令行字符串之中解析出来的命令行对象)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.IORedirect.Start(System.Boolean)">
	<summary>
 Start the target process.(启动目标进程)
 </summary>
	<param name="WaitForExit">Indicate that the program code wait for the target process exit or not?(参数指示应用程序代码是否等待目标进程的结束)</param>
	<returns>当发生错误的时候会返回错误代码</returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.IORedirect">
	<summary>
 A communication fundation class type for the commandline program interop.
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataColumnAttribute.#ctor(System.String,System.Int32)">
	<summary>
	</summary>
	<param name="Name">列名称，假若本参数为空的话，则使用属性名称</param>
	<param name="index">从1开始的下标，表示为第几列</param>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameColumnAttribute.Index">
	<summary>
 Gets the index.
 </summary>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameColumnAttribute.Name">
	<summary>
 Gets or sets the name.
 </summary>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameColumnAttribute.#ctor(System.String)">
	<summary>
 Initializes a new instance by name.
 </summary>
	<param name="name">The name.</param>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameColumnAttribute.#ctor(System.Int32)">
	<summary>
 Initializes a new instance by index.
 </summary>
	<param name="index">The index.</param>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameColumnAttribute">
	<summary>
 Represents a column of certain data frames.
 </summary>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFrameIO`1.InitializeSchema``1">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Math.STD(System.Double[])">
	<summary>
 Standard Deviation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Math.STD(System.Int32[])">
	<summary>
 Standard Deviation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Math.STD(System.Int64[])">
	<summary>
 Standard Deviation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Math.STD(System.Single[])">
	<summary>
 Standard Deviation
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.Collection.Generic.PairItem`2.Equals(Microsoft.VisualBasic.ComponentModel.Collection.Generic.PairItem{`0,`1})">
	<summary>
 Call by the method <see cref="M:Microsoft.VisualBasic.IEnumerations.GetItem``3(``2,System.Collections.Generic.IEnumerable{``2})"></see>
	</summary>
	<param name="pairItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.IEnumerations.GetItem``3(``2,System.Collections.Generic.IEnumerable{``2})">
	<summary>
 use the overload method <see cref="M:Microsoft.VisualBasic.ComponentModel.Collection.Generic.PairItem`2.Equals(Microsoft.VisualBasic.ComponentModel.Collection.Generic.PairItem{`0,`1})"></see> of the type <see cref="T:Microsoft.VisualBasic.ComponentModel.Collection.Generic.PairItem`2"></see>
	</summary>
	<typeparam name="TItem1"></typeparam>
	<typeparam name="TItem2"></typeparam>
	<typeparam name="pairItem"></typeparam>
	<param name="Item"></param>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.IEnumerations.Takes``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 按照UniqueId列表来筛选出目标集合
 </summary>
	<typeparam name="T"></typeparam>
	<param name="IdList"></param>
	<param name="TargetCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.IEnumerations.ToDictionary``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 将目标集合对象转换为一个字典对象
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Interpreter.Execute(Microsoft.VisualBasic.CommandLine.CommandLine)">
	<summary>
 Execute the specific command line using this interpreter.
 </summary>
	<param name="CommandLine">The user input command line string.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Interpreter.SDKdocs">
	<summary>
 Generate the sdk document for the target program assembly.(生成目标应用程序的命令行帮助文档)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Interpreter.CreateInstance(System.Type)">
	<summary>
 从目标类型之中构造出一个命令行解释器
 </summary>
	<param name="Type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.IConsole.WriteLine(System.String)">
	<summary>
 将指定的字符串值（后跟当前行终止符）写入输出流。
 </summary>
	<param name="s"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.IConsole.WriteLine(System.String,System.String[])">
	<summary>
 将指定的字符串值（后跟当前行终止符）写入输出流。
 </summary>
	<param name="s"></param>
	<param name="args"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.IConsole.ReadLine">
	<summary>
 从输入流读取下一行字符
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.IConsole.Read">
	<summary>
 从输入流读取下一个字符
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.IConsole">
	<summary>
 表示一个输入输出流控制台界面接口
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.IFormatProvider.ActionFormat(System.String,System.String)">
	<summary>
 将一个输入的字符串按照用户指定的格式进行格式化后返回
 </summary>
	<param name="_format">指定的格式字符串</param>
	<param name="value">输入的值</param>
	<returns>经过格式化之后的字符串</returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.IFormatProvider">
	<summary>
 对字符串进行格式控制输出的类对象所必须实现的格式输出接口
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.g">
	<summary>
 g格式符：它将根据数值的大小，自动选用f格式或e格式输出数据，并且它不输出无意义的0
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.P">
	<summary>
 %%格式，直接返回一个字符'%'
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.e._m_ne">
	<summary>
 %m.ne
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.e.__m_ne">
	<summary>
 %-m.ne
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.e.FormatString(System.String,System.String)">
	<summary>
	</summary>
	<param name="_format"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.e._m_nef(System.Int32,System.Int32,System.String,System.Int32)">
	<summary>
 %m.ne
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.e.__m_nef(System.Int32,System.Int32,System.String,System.Int32)">
	<summary>
 %-m.ne
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.e">
	<summary>
 e格式符：以指数形式输出实数
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.f._m_nf">
	<summary>
 %m.nf
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.f.__m_nf">
	<summary>
 %-m.nf
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.f.Default">
	<summary>
 默认的小数位长度为6位
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f.FormatString(System.String,System.String)">
	<summary>
	</summary>
	<param name="_format"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f.df(System.Int32,System.String)">
	<summary>
 控制小数的位数后输出
 </summary>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f.__m_nff(System.Int32,System.Int32,System.String)">
	<summary>
 %-m.nf
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f._m_nff(System.Int32,System.Int32,System.String)">
	<summary>
 %m.nf
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f.pIntr(System.String)">
	<summary>
 解析整数部分
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.f.pDeci(System.Int32,System.String)">
	<summary>
 解析小数部分
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.f">
	<summary>
 f格式符：按实数格式输出
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.s._ms">
	<summary>
 %ms
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.s.__ms">
	<summary>
 %-ms
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.s._m_ns">
	<summary>
 %m.ns
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.s.__m_ns">
	<summary>
 %-m.ns
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.s.FormatString(System.String,System.String)">
	<summary>
	</summary>
	<param name="_format"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.s.__m_nsf(System.Int32,System.Int32,System.String)">
	<summary>
 %-m.ns
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.s._m_nsf(System.Int32,System.Int32,System.String)">
	<summary>
 %m.ns
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.s.__msf(System.Int32,System.String)">
	<summary>
 %-ms
 </summary>
	<param name="m"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.s._msf(System.Int32,System.String)">
	<summary>
 %ms
 </summary>
	<param name="m"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.s">
	<summary>
 s格式符：用来输出一个字符串
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.c">
	<summary>
 c格式符：用来输出一个字符。一个整数，其值在0～255之间时也可以以字符的格式输出
 </summary>
	<remarks>一个整数，若其值在0～255范围内，也可以用字符形式输出，在输出前，将该整数转换为对应的ASCII字符。反之，一个字符数据也可以用整数形式输出</remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.u">
	<summary>
 u格式符：以十进制数形式输出unsigned的整数
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.x">
	<summary>
 x格式符：按十六进制格式输出整数。(不会出现负数格式) 
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.o">
	<summary>
 o(字母)格式符：按八进制格式输出整数。(不会出现负数格式)
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.b">
	<summary>
 b格式符：按照二进制格式输出整数
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.d._md">
	<summary>
 %md
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.d._mld">
	<summary>
 %mld
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.d._0md">
	<summary>
 %0md
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.d._0mld">
	<summary>
 %0mld
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.d.FormatString(System.String,System.String)">
	<summary>
	</summary>
	<param name="_format"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.d._mldf(System.Int32,System.String)">
	<summary>
 %md or %mld
 </summary>
	<param name="m"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.d._0mldf(System.Int32,System.String)">
	<summary>
 %0md or %0mld
 </summary>
	<param name="m"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.d.Zero(System.Int32)">
	<summary>
 获得含有指定数目的字符0的字符串
 </summary>
	<param name="m"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio.d">
	<summary>
 d格式符：按十进制格式输出
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFramework.CreateObject``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Convert target data object collection into a datatable for the data source of the <see cref="T:System.Windows.Forms.DataGridView"></see>&gt;.
 (将目标对象集合转换为一个数据表对象，用作DataGridView控件的数据源)
 </summary>
	<typeparam name="T"></typeparam>
	<param name="DataCollection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFramework.GetValue``1(System.Data.DataTable)">
	<summary>
 Retrive data from a specific datatable object.(从目标数据表中获取数据)
 </summary>
	<typeparam name="T"></typeparam>
	<param name="DataTable"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataFramework">
	<summary>
 在目标对象中必须要具有一个属性有自定义属性<see cref="T:Microsoft.VisualBasic.ComponentModel.DataSourceModel.DataColumnAttribute"></see>
	</summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.Namespace.Description">
	<summary>
 A brief description text about the function of this namespace
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Reflection.Namespace.CreateInstance(System.Type)">
	<summary>
 从目标类型之中构造出一个命令行解释器
 </summary>
	<param name="Type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.Reflection.Namespace">
	<summary>
 (CommandLine interpreter executation Entry and the ShellScript software packages namespace.)这是一个命令行解释器所使用的执行入口点的集合
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.CommandAttribute.Name">
	<summary>
 这个命令的名称
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.CommandAttribute.Info">
	<summary>
 Something detail of help information.(详细的帮助信息)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.CommandAttribute.Usage">
	<summary>
 The usage of this command.(这个命令的用法，本属性仅仅是一个助记符，当用户没有编写任何的使用方法信息的时候才会使用本属性的值)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.CommandAttribute.Example">
	<summary>
 A example that to useing this command.(对这个命令的使用示例，本属性仅仅是一个助记符，当用户没有编写任何示例信息的时候才会使用本属性的值)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.Reflection.CommandAttribute">
	<summary>
 A command object that with a specific name.
 (一个具有特定名称命令执行对象)
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.CommandLine.Reflection.Optional.TypesConverts">
	<summary>
 对类型的转换方法进行枚举
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Reflection.Optional.Generate``1(``0)">
	<summary>
	</summary>
	<typeparam name="InteropService">
 A class type object for interaction with a commandline program.
 (与命令行程序进行交互的模块对象类型)
 </typeparam>
	<param name="Instance">目标交互对象的实例</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Reflection.Optional.ClearParameters``1(``0)">
	<summary>
	</summary>
	<typeparam name="TInteropService"></typeparam>
	<param name="Instance"></param>
	<returns>返回所重置的参数的个数</returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.Reflection.Optional">
	<summary>
 Optional commandline arguments
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.SwitchDescription.Name">
	<summary>
 该命令开关的名称
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.SwitchDescription.Description">
	<summary>
 对这个开关参数的具体的描述以及帮助信息，可以使用\n转义字符进行换行
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.SwitchDescription.Example">
	<summary>
 该开关的值的示例
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.SwitchDescription.Optional">
	<summary>
 本开关是否为可选的参数
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.Reflection.SwitchDescription">
	<summary>
 Use for the detail description for a specific commandline switch.(用于对某一个命令的开关参数的具体描述帮助信息)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageAttribute.#ctor(Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages,System.String)">
	<summary>
	</summary>
	<param name="Language">The language of the target object.</param>
	<param name="Context"></param>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.KeyValuePair">
	<summary>
 An object for the text file format xml data storage.(用于存储与XML文件之中的字符串键值对对象)
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.Key_strArrayValuePair">
	<summary>
 {Key, strArray()}
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.INIProfile.GetValue(System.String,System.String,System.String)">
	<summary>
 Get the value from a specific section/key in a file of path 
 </summary>
	<param name="path"></param>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.INIProfile">
	<summary>
 Wrapper class for *.ini and *.inf configure file.(可能文件中的注释行会受到影响，所以请尽量使用本类型中的两个静态函数来操作INI文件)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.MemoryDump.CreateDumpInvoke(System.Object,System.UInt32)">
	<summary>
 Create memory dump for a class object instance
 </summary>
	<param name="obj"></param>
	<param name="DumpLevel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Common.Assembly">
	<summary>
 调用本模块的程序集的可执行文件的完整的文件路径
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.ITextFile.Read(System.String,System.Text.Encoding)">
	<summary>
	</summary>
	<param name="FilePath"></param>
	<param name="Encoding">Default value is UTF8</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.ITextFile.ReadAllLines(System.String,System.Text.Encoding)">
	<summary>
	</summary>
	<param name="FilePath"></param>
	<param name="Encoding">Default value is UTF8</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.Settings.IProfile.FilePath">
	<summary>
 本属性不能够被设置为只读属性是因为 Settings.Settings(Of IProfile).LoadFile 函数的需要
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.ComponentModel.Settings.Settings`1.FilePath">
	<summary>
 TargetData对象的文件路径
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.Settings.Settings`1.LoadFile(System.String)">
	<summary>
	</summary>
	<param name="XmlFile">目标配置文件的Xml文件的文件名</param>
	<returns>可以调用的配置项的数目，解析失败则返回0</returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages.System">
	<summary>
 Following the system default language.
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages.ZhCN">
	<summary>
 Language in Chinese simplify.
 (简体中文) 
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages.EnUS">
	<summary>
 Language in English.
 (英语语言)
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages.FrFR">
	<summary>
 Language in french.
 (法语语言)
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages">
	<summary>
 Enum the mainly used language.
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Text(Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.Languages)">
	<summary>
 Get the string that store as specific language.
 (获取指定语言的字符串)
 </summary>
	<param name="Language">字符串的语言</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.GetAttribute``1(System.Reflection.PropertyInfo)">
	<summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
	<typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
	<param name="Property">Target property object.(目标属性对象)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.GetAttribute``1(System.Reflection.MemberInfo)">
	<summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
	<typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
	<param name="Property">Target property object.(目标属性对象)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LanguageHelper.LanguageHelper.GetAttribute``1(System.Reflection.MethodInfo)">
	<summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
	<typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
	<param name="Property">Target property object.(目标属性对象)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Logging.LogFile.SuppressError">
	<summary>
 Indicated that write the <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.ERR">Error type</see> message to the console screen, this 
 property will override the WriteToScreen parameter in function <see cref="M:Microsoft.VisualBasic.Logging.LogFile.WriteLine(System.String,System.String,Microsoft.VisualBasic.Logging.LogFile.MsgTypes,System.Boolean)"></see> when the 
 message type is <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.ERR">Error type</see>.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Logging.LogFile.SuppressWarns">
	<summary>
 Indicated that write the <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.WRN">Warn type</see> message to the console screen, this 
 property will override the WriteToScreen parameter in function <see cref="M:Microsoft.VisualBasic.Logging.LogFile.WriteLine(System.String,System.String,Microsoft.VisualBasic.Logging.LogFile.MsgTypes,System.Boolean)"></see> when the 
 message type is <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.WRN">Warn type</see>.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Logging.LogFile.ColorfulOutput">
	<summary>
 是否采用彩色的输出，默认为关闭：
 <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.INF">一般的消息</see> - 白色; 
 <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.WRN">警告级别的消息</see> - 黄色; 
 <see cref="F:Microsoft.VisualBasic.Logging.LogFile.MsgTypes.ERR">错误级别的消息</see> - 红色
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Logging.LogFile.FileName">
	<summary>
 没有路径名称和拓展名，仅包含有单独的文件名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LogFile.#ctor(System.String)">
	<summary>
	</summary>
	<param name="Path">This logfile will saved to.</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Logging.LogFile.WriteLine(System.String,System.String[])">
	<summary>
	</summary>
	<param name="s"></param>
	<param name="args">{[Object] As String, Optional Type As MsgType = MsgType.INF, Optional WriteToScreen As Boolean = True}</param>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFClient._UpdateFlag">
	<summary>
 内存映射文件的更新标识符
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFClient._ClientThread">
	<summary>
 客户端的监听线程
 </summary>
	<remarks></remarks>
</member><member name="E:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFClient.DataArrival">
	<summary>
 客户端接受到的数据需要经过反序列化解码方能读取
 </summary>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFClient.ChunkSize">
	<summary>
 内存映射文件的数据块的预分配大小
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFServer.#ctor(System.String)">
	<summary>
	</summary>
	<param name="host"></param>
	<remarks>对象实例会首先尝试以服务器的角色建立连接，当不成功的时候会以客户端的形式建立连接</remarks>
</member><member name="T:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMFServer">
	<summary>
	</summary>
	<remarks>
 mmfServer的主要功能是创建并维护一个内存映射文件
 </remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.MMFSocket.MMF_File.byteData">
	<summary>
 内存映射文件中所存储的将要进行进程间交换的数据
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.ProcessLock.ProcessLock">
	<summary>
 进程排斥锁
 </summary>
	<remarks>
 程序中采用一个进程排斥锁是由于待日后Mono运行时环境在Linux平台中的WinForm GTK成熟后，向Linux平台迁移，
 由于Visual Baisc/C#所编写的应用程序需要保持单个进程，则需要启用应用程序框架，而很多情况下为了优化的需求应用程序
 无法使用应用程序框架，为了实现一次编译到处运行的目的，程序的代码不会再平台间进行修改，
 由于Linux平台之上不能使用Win32API来保持单进程，为了保持程序对Windows/Linux/MAC三大操作系统的兼容性，故而在这里使用了一个进程排斥锁
 </remarks>
</member><member name="F:Microsoft.VisualBasic.MMFProtocol.ProcessLock.f_ProcessLock">
	<summary>
 进程锁的排斥情况
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.MMFProtocol.ProcessLock.#ctor(System.String)">
	<summary>
	</summary>
	<param name="strHost">进程排斥锁的锁名</param>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.MMFProtocol.ProcessLock.Locked">
	<summary>
 返回当前的进程是否被加锁
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.MMFProtocol.ProcessLock">
	<summary>
 进程排斥锁
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.My.Resources.Resources.ResourceManager">
	<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member><member name="P:Microsoft.VisualBasic.My.Resources.Resources.Culture">
	<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member><member name="T:Microsoft.VisualBasic.My.Resources.Resources">
	<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.Switchs.Count">
	<summary>
 本命令行对象中的包含有帮助信息的开关参数的数目
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.CommandLine.Reflection.Switchs.Switch(System.String)">
	<summary>
 显示某一个指定名称的开关信息
 </summary>
	<param name="Name"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Reflection.Switchs.ToString">
	<summary>
 显示所有的开关信息
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.CommandLine.Reflection.Switchs">
	<summary>
 某一个指定的命令的开关的帮助信息
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.IFormater">
	<summary>
 A dictionary list of the method of format a string provider class object. 
 (标准输入输出对象的格式化方法所提供的对象的字典)
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Stdio.Eschs">
	<summary>
 A dictionary list of the escape characters.
 (转义字符列表)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.Format(System.String,System.String[])">
	<summary>
 Formatting a string using some formation arguments.
 (使用一些指定的格式化参数来格式化一个字符串)
 </summary>
	<param name="s"></param>
	<param name="Args"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.Printfn(System.String,System.String[])">
	<summary>
 Output the string to the console using a specific formation. 
 (按照指定的格式将字符串输出到终端窗口之上)
 </summary>
	<param name="s">A string to print on the console window.(输出到终端窗口之上的字符串)</param>
	<param name="Args">Formation parameters.(格式化参数)</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.Scanf(System.String@)">
	<summary>
 Read the string that user input on the console to the function paramenter.
 (将用户在终端窗口之上输入的数据赋值给一个字符串变量)
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Stdio">
	<summary>
 A standard input/output compatibility package that makes VisualBasic console 
 program easily running on the Linux server or mac osx operating system.
 (一个用于让VisualBasic应用程序更加容易的运行于Linux服务器或者MAC系统之上的
 标准输入输出流的系统兼容包)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.EMailClient.SendMessagesTo(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="emailTitle">标题</param>
	<param name="emailNote">内容</param>
	<param name="emailUser">收件人地址</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.EMailClient.GmailClient(System.String,System.String)">
	<summary>
 Gmail
 </summary>
	<param name="Account"></param>
	<param name="Password"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.EMailClient.MailContents.Attatchments">
	<summary>
 The path list of the attachments file.
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.EMailClient.MailContents.Logo">
	<summary>
 The file path of the logo image.
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.EMailClient">
	<summary>
 A client of gmail.com
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Win32File.GetShare(System.IO.FileShare)">
	<summary>
 uint GetShare(FileShare share)
 Converts the FileShare constant to win32 constant
 </summary>
	<param name="share"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Win32File.OpenRead(System.String)">
	<summary>
 Open readonly file mode open(String, FileMode.Open, FileAccess.Read, FileShare.Read)
 </summary>
	<param name="filepath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Win32File.OpenWrite(System.String)">
	<summary>
 open writable open(String, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None).
 </summary>
	<param name="filepath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Win32File">
	<summary>
 .NET 2.0 Workaround for PathTooLongException
 </summary>
	<remarks>
 http://www.codeproject.com/Articles/22013/NET-Workaround-for-PathTooLongException
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.ToEntriesDictionary``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="Collection">请务必要确保集合之中的元素的<see cref="P:Microsoft.VisualBasic.ComponentModel.Collection.Generic.IAccessionIdEnumerable.UniqueId"></see></param>属性是唯一的，否则会出错
 <returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Intersection(System.Collections.Generic.IEnumerable{System.String[]})">
	<summary>
 求交集
 </summary>
	<param name="Chunkbuffer"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.StdError(System.Collections.Generic.IEnumerable{System.Double})">
	<summary>
 求取该数据集的标准差
 </summary>
	<param name="data"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Counts(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
	</summary>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.TrimNull``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Remove all of the null object in the target object collection
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.RandomizeElements``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 从原有序序列中获取一个随机元素的序列
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.GetFirstValue``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Get the value of the first element, if the collection is null or empty then return nothing as default value
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.TakeRandomly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
	<summary>
 随机的在目标集合中选取指定数目的子集合
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<param name="Counts">当目标数目大于或者等于目标集合的数目的时候，则返回目标集合</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.AddHandle``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 为列表中的对象添加对象句柄值
 </summary>
	<param name="Collection"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Sequence``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 获取某一个集合的下标的集合
 </summary>
	<typeparam name="T">集合中的元素为任意类型的</typeparam>
	<param name="Collection">目标集合对象</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Takes``1(System.Collections.Generic.IEnumerable{``0},System.Int32[],System.Int32)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<param name="IndexCollection">所要获取的目标对象的下表的集合</param>
	<param name="OffSet"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Sequence(System.Int32)">
	<summary>
 产生指定数目的一个递增序列
 </summary>
	<param name="n"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Sequence(System.Int64)">
	<summary>
 产生指定数目的一个递增序列
 </summary>
	<param name="n"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Sequence(System.UInt32)">
	<summary>
 产生指定数目的一个递增序列
 </summary>
	<param name="n"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Append``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 向一个列表对象之中批量添加一个对象的集合
 </summary>
	<typeparam name="T"></typeparam>
	<param name="List"></param>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.AsDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
	<summary>
 将目标键值对对象的集合转换为一个字典对象
 </summary>
	<typeparam name="TKey"></typeparam>
	<typeparam name="TValue"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 This object collection is a null object or contains zero count items.(判断某一个对象集合是否为空)
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.SaveTo(System.String,System.String,System.Text.Encoding)">
	<summary>
 将目标文本字符串写入到一个指定路径的文件之中，但是不会在文件末尾追加新的数据
 </summary>
	<param name="Path"></param>
	<param name="Text"></param>
	<param name="Encoding"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.GetXml``1(``0)">
	<summary>
 将一个类对象序列化为XML文档
 </summary>
	<typeparam name="T"></typeparam>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.LoadXml``1(System.String,System.Text.Encoding)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="XmlFile">XML文件的文件路径</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Serialize``1(``0,System.String)">
	<summary>
 使用二进制序列化保存一个对象
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Obj"></param>
	<param name="path"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Load``1(System.String)">
	<summary>
 使用反二进制序列化从指定的文件之中加载一个对象
 </summary>
	<typeparam name="T"></typeparam>
	<param name="path"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Create``1(System.String)">
	<summary>
 使用一个XML文本内容创建一个XML映射对象
 </summary>
	<typeparam name="T"></typeparam>
	<param name="Xml">是Xml文件的文件内容而非文件路径</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Shell(System.String)">
	<summary>
 执行一个命令行语句，并返回一个IO重定向对象，以获取被执行的目标命令的标准输出
 </summary>
	<param name="CommandLine"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.π(System.Collections.Generic.IEnumerable{System.Double})">
	<summary>
 获取一个实数集合中所有元素的积
 </summary>
	<param name="Elements"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Extensions.ILLEGAL_PATH_CHARACTERS_ENUMERATION">
	<summary>
 枚举所有非法的路径字符
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.NormalizePathString(System.String,System.Boolean)">
	<summary>
 将目标字符串之中的非法的字符替换为"_"符号以成为正确的文件名字符串
 </summary>
	<param name="str"></param>
	<param name="OnlyASCII">当本参数为真的时候，仅26个字母，0-9数字和下划线_以及小数点可以被保留下来</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.GetValue(System.String)">
	<summary>
 获取两个尖括号之间的内容
 </summary>
	<param name="strData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Extensions.Get_PageContent(System.String,System.UInt32,System.Boolean)">
	<summary>
 Get the html page content from a website request or a html file on the local filesystem.
 </summary>
	<param name="url">web http request url or a file path handle</param>
	<param name="RequestTimeOut">发生错误的时候的重试的次数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Extensions">
	<summary>
 Common extension methods library for convenient the programming job.
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ProgramPathSearchTool.SearchScriptFile(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="Dir"></param>
	<param name="Keyword"></param>
	<param name="withExtension">脚本文件的文件拓展名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ProgramPathSearchTool.SearchDirectory(System.String,System.String)">
	<summary>
	</summary>
	<param name="SpecificDrive">所制定进行搜索的驱动器，假若希望搜索整个硬盘，请留空字符串</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ProgramPathSearchTool">
	<summary>
 通过关键词来推测路径
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.CommandLine.Reflection.CommandInfo.Execute(System.Object[])">
	<summary>
	</summary>
	<param name="parameters">数组的长度必须与目标函数的参数的数目一致，否则短于目标函数的参数的数目的数组会使用Nothing来填充缺少的部分，而多于目标函数的参数会被截断</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Stdio.Shell(System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
	<summary>
	</summary>
	<param name="CommandLine"></param>
	<param name="WindowStyle"></param>
	<param name="WaitForExit">If NOT, then the function returns the associated process id value. Else returns the process exit code.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.Settings.SimpleConfig.TryParse``2(System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<typeparam name="TConfig"></typeparam>
	<param name="canRead">向文件之中写数据的时候，需要设置为真</param>
	<param name="canWrite">从文件之中读取数据的时候，需要设置为真</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.Settings.SimpleConfig.GenerateConfigurations``1(``0)">
	<summary>
 从类型实体生成配置文件数据
 </summary>
	<typeparam name="T"></typeparam>
	<param name="target"></param>
	<returns></returns>
	<remarks>类型实体之中的简单属性，只要具备可读属性即可被解析出来</remarks>
</member><member name="M:Microsoft.VisualBasic.Webpage.Get_href(System.String)">
	<summary>
	</summary>
	<param name="strData">A string that contains the url string pattern like: href="url_text"</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.Comb`1.EOL">
	<summary>
 对象列表是否已经完全组合输出
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.Comb`1.NewLine">
	<summary>
 是否已经开始读取新的一行数据
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.Comb`1">
	<summary>
 对象类型的组合输出工具
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.IHandler.Handle">
	<summary>
 The ID that this object in a list instance.
 (本对象在一个列表对象中的位置索引号) 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.IHandler">
	<summary>
 This object gets a object handle value to indicated that the position this object exists 
 in the list collection structure. 
 (这个对象具有一个用于指明该对象在列表对象中的位置的对象句柄值)
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.ComponentModel.HandledList`1._ListData">
	<summary>
 Object instances data physical storage position, element may be null after 
 remove a specify object handle. 
 (列表中的元素对象实例的实际存储位置，当对象元素从列表之中被移除了之后，其将会被销毁)
 </summary>
	<remarks>
 即与只读属性'ListData'相比，这个字段的列表中可能含有空引用的元素对象.
 </remarks>
</member><member name="F:Microsoft.VisualBasic.ComponentModel.HandledList`1._EmptyListStack">
	<summary>
 Stack list that store the empty pointer
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.ComponentModel.HandledList`1._HandleList">
	<summary>
 Exists handle that store in this list
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.HandledList`1.ListData">
	<summary>
 Get the logical list of the data store in this list object instance.
 (获取逻辑形式的列表数据)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.HandledList`1.Count">
	<summary>
 Get the logical list length 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.ComponentModel.HandledList`1.Item(System.Int64)">
	<summary>
 Get or set a object instance data that has specify handle value
 </summary>
	<param name="Handle">Target object handle value</param>
	<value>It is not recommend that you use this property to set the data element as the list object's capacity may not cover your handle</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.#ctor(System.Int32)">
	<summary>
 Construct a new list object
 </summary>
	<param name="Capacity">The initialize size of this list object, Optional parameter, default value is 2048</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.Append(`0@)">
	<summary>
 Add a disposable object instance element into this list object and return its object handle value in this list object    
 </summary>
	<param name="e">Object instance that will be store in this list object</param>
	<returns>Object handle in this list object instance</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.AppendRange(System.Collections.Generic.IEnumerable{`0}@)">
	<summary>
 Append a list of object instance
 </summary>
	<param name="list"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.RemoveAt(System.Int64)">
	<summary>
 Remove a object instance element in this list object that have a specify handler
 </summary>
	<param name="Handle">Object handle value that specify the target object</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.Exists(System.Int64)">
	<summary>
 Know that the specify handle pointe object is null or not? 
 </summary>
	<param name="Handle">Object handle</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.Exists(`0)">
	<summary>
 Know that a specify object instance exists in this list object or not? 
 (判断某一个指定的对象实例是否存在于列表对象之中)
 </summary>
	<param name="e">Target object instance(目标要进行查找的对象实例)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.Remove(`0)">
	<summary>
 Remove a specify object in this list object using its hashcode and return its handle value.
 (使用对象的哈希值来查找目标对象并对其进行移除，之后返回其句柄值) 
 </summary>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.ComponentModel.HandledList`1.Flush">
	<summary>
 Clear all of the data in this list object instance.
 (清除本列表对象中的所有数据)
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.ComponentModel.HandledList`1">
	<summary>
	</summary>
	<typeparam name="T">
 Class object that can be dispose by the system automatically and the class object that should 
 have a handle property to specific its position in this list class. 
 (能够被系统所自动销毁的对象类型，并且该类型的对象必须含有一个Handle属性来指明其在本列表中的位置)
 </typeparam>
	<remarks></remarks>
</member>
</members>
</doc>