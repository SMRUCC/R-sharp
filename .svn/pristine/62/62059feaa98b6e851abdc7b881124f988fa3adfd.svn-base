<?xml version="1.0"?>
<doc>
<assembly>
<name>
Math
</name>
</assembly>
<members>
<member name="M:Microsoft.VisualBasic.Mathematical.BasicR.Parser.Matrix(System.String)">
	<summary>
 Parsing a matrix object from a expression string.(从一个表达式之中解析出一个矩阵)
 </summary>
	<param name="expression"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.ScriptEngine.StatementEngine">
	<summary>
 all of the commands are stored at here
 </summary>
	<remarks>
 .quit for do nothing and end of this program.
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Constants.Add(System.String,System.String)">
	<summary>
 Add a user constant to the dictionary.
 (向字典之中添加用户自定义常数)
 </summary>
	<param name="Name"></param>
	<param name="value"></param>
	<remarks>
 const [name] [value]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Constants.Add(System.String)">
	<summary>
 Add a user const from the input of user on the console.
 </summary>
	<param name="statement"></param>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic.Arithmetic">
	<summary>
 +-*/\%^!
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic.OPERATORS">
	<summary>
 A string constant that enumerate all of the arithmetic operators.
 (一个枚举所有的基本运算符的字符串常数) 
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic.DOUBLE_NUMBER_REGX">
	<summary>
 A string constant RegularExpressions that stands a double type number.
 (一个用于表示一个双精度类型的实数的正则表达式)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic.Evaluate(System.Double,System.Double,System.Char)">
	<summary>
 Do a basically arithmetic calculation.
 (进行一次简单的四则运算) 
 </summary>
	<param name="a"></param>
	<param name="b"></param>
	<param name="o">Arithmetic operator(运算符)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic.Factorial(System.Double,System.Double)">
	<summary>
 Calculate the factorial value of a number, as this function is the part of the arithmetic operation 
 delegate type of 'System.Func(Of Double, Double, Double)', so it must keep the form of two double 
 parameter, well, the parameter 'b As Double' is useless.
 (计算某一个数的阶乘值，由于这个函数是四则运算操作委托'System.Func(Of Double, Double, Double)'中的一部分，
 故而本函数保持着两个双精度浮点型数的函数参数的输入形式，也就是说本函数的第二个参数'b'是没有任何用途的)  
 </summary>
	<param name="a">The number that will be calculated(将要被计算的数字)</param>
	<param name="b">Useless parameter 'b'(无用的参数'b')</param>
	<returns>
 Return the factorial value of the number 'a', if 'a' is a negative number then this function 
 return value 1.
 (函数返回参数'a'的阶乘计算值，假若'a'是一个负数的话，则会返回1)
 </returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.BasicR.Helpers.MatrixMathArithmetic">
	<summary>
 The basics arithmetic operators' definition of matrix object in mathematics.
 (数学意义上的基本的四则运算符号的定义)  
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.SG(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵的满秩分解Math_Matrinx_SG，把矩阵K分解成一种行满秩Return_m 是m*r与列满秩的矩阵Return_n是r*n.返回值为r.r是其秩
 </summary>
	<param name="K">为要满秩分解的方阵</param>
	<param name="Return_M">所求得的m*r矩阵</param>
	<param name="Return_N">所求得的r*n矩阵</param>
	<returns></returns>
	<remarks>
 其中A为m*n的矩阵,r为A的秩.即A=Return_M*Return_N.函数执行成功返回r(也就是其秩)
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Pinv(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵的广义逆A+ ，返回m*n矩阵Return_K(,)的m。此广义逆是Moore-Penrose A+逆
 </summary>
	<param name="K">要求广义逆的矩阵</param>
	<param name="Return_K">求得的广义逆矩阵</param>
	<returns>函数执行成功返回m,其中m代表Return_K的行数</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Pinv2(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵的广义逆A-，函数执行成功返回Ret的行数,出错返回0
 </summary>
	<param name="K">要求广义逆的矩阵</param>
	<param name="Erro">误差控制参数</param>
	<param name="m">矩阵K的行数</param>
	<param name="Ret">求得的广义逆矩阵</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.GetRank(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16)">
	<summary>
 矩阵求秩，函数执行成功返回秩的大小
 </summary>
	<param name="K">要求秩的矩阵</param>
	<param name="error_">误差控制参数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.QR(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 方阵的QR分解
 </summary>
	<param name="K">要QR分解的矩阵，K必须是非奇异的n阶方阵</param>
	<param name="Q">分解后的Q矩阵</param>
	<param name="R">分解后的R矩阵</param>
	<returns>函数执行成功返回True,失败返回False</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Schmidt(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵施密特(Schmidt)正交规范化
 </summary>
	<param name="K">要施密特(Schmidt)正交规范化的矩阵</param>
	<param name="Ret">正交规范化后的矩阵</param>
	<returns>函数执行成功返回True,失败返回False</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.EigenValue(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Int16,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,System.Boolean)">
	<summary>
 方阵求特征值
 </summary>
	<param name="K11">要求特征值的方阵</param>
	<param name="n">方阵K1的阶数</param>
	<param name="LoopNumber">循环次数</param>
	<param name="Errro">误差控制变量</param>
	<param name="Ret">返回的特征值,Ret是是n*2的数组,第一列是实数部分,第2列为虚数部分</param>
	<param name="IsHess">K1是否已经是上Hessenberg矩阵</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Hessenberg(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 将方阵化为上(Hessenberg)矩阵，函数成功返回Ret的阶数
 </summary>
	<param name="A">要化为上(Hessenberg)矩阵的矩阵</param>
	<param name="n">为方阵A的阶数</param>
	<param name="ret">化为上(Hessenberg)矩阵后的矩阵</param>
	<returns>函数成功返回Ret的阶数</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.SvdSplit(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16)">
	<summary>
 对矩阵A进行奇异值分解
 </summary>
	<param name="A">目标矩阵</param>
	<param name="m">A矩阵的行数</param>
	<param name="V">分解得到的一个V矩阵</param>
	<param name="V_m">V矩阵的行数</param>
	<param name="S">分解得到的一个S矩阵</param>
	<param name="S_m">S矩阵的行数</param>
	<param name="U">分解得到的一个U矩阵</param>
	<param name="U_m">U矩阵的行数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Cramer22(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 求Kx=B的最小二乘解
 </summary>
	<param name="K">是x的系数矩阵</param>
	<param name="B">是等式右边的常数矩阵</param>
	<param name="k_m">矩阵K的行数</param>
	<param name="x">求解得到的解</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Det2(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 求行列式
 </summary>
	<param name="k">所求的n阶方阵</param>
	<param name="N">方阵K的阶数</param>
	<returns>函数成功返回其行列式的大小</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.SPD(Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵正规、对称、正定性判断
 </summary>
	<param name="K">为要判断的矩阵</param>
	<returns>函数返回-1矩阵非对称矩阵,返回0矩阵不正定,返回1矩阵正定</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.LLt(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Boolean)">
	<summary>
 矩阵的LLt分解
 </summary>
	<param name="A">要进行LLt分解的方阵</param>
	<param name="L">分解得到的L方阵</param>
	<param name="is1_是否已经正定"></param>
	<returns>函数成功返回True,失败返回False.(其中Lt是L的转置,即分解后 A=L×Lt)</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.QR22(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Int16)">
	<summary>
 矩阵的QR分解
 </summary>
	<param name="A">要QR分解的矩阵（不一定是方阵）</param>
	<param name="Q">分解得到的Q矩阵</param>
	<param name="R">分解得到的R矩阵</param>
	<param name="Q_n">返回Q矩阵的列数</param>
	<param name="R_n">返回R矩阵的列数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.QR2(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Int16)">
	<summary>
 矩阵的QR分解
 </summary>
	<param name="A">要QR分解的矩阵(不一定是方阵)</param>
	<param name="Q">分解得到的Q矩阵</param>
	<param name="R">分解得到的R矩阵</param>
	<param name="Q_n">返回Q矩阵的列数</param>
	<param name="R_n">返回R矩阵的列数</param>
	<returns>函数成功返回True,失败返回False.使用本函数时,A矩阵的行数不能小于列数</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.LU(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 方阵LU分解
 </summary>
	<param name="K">为要LU分解的方阵</param>
	<param name="n">方阵K的阶数</param>
	<param name="L">为分解得到的L矩阵</param>
	<param name="U">为分解得到的U矩阵</param>
	<returns>其意义是K=LU.函数执行成功返回True,失败返回False</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Inv2(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 矩阵求逆
 </summary>
	<param name="K">目标方阵</param>
	<param name="Return_K">求得的逆矩阵</param>
	<param name="N">方阵K的阶数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.DetF(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 求行列式，函数执行成功返回其行列式大小.其原理是按行列式定义依次展开求解.不适合大于5阶的方阵，K的数组大小为N*N的,不然程序出错
 </summary>
	<param name="k">为n阶方阵</param>
	<param name="N">为矩阵A的阶数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Inv(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵求逆
 </summary>
	<param name="K">为要求逆的方阵</param>
	<param name="Return_K">为所求得的逆</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Svd(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵奇异值
 </summary>
	<param name="A">为目的矩阵</param>
	<param name="m">为A矩阵的行数</param>
	<param name="Ret">获取到的奇异值矩阵,即返回的Ret是m*1的矩阵</param>
	<returns>函数执行成功返回奇异值的个数,即Ret的行数,失败返回-1</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.SymTridMatrix(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Boolean,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 实对称阵化为对称三对角阵
 </summary>
	<param name="A">目标方阵</param>
	<param name="n">方阵A的阶数</param>
	<param name="Is对称">不确定是否对称直接填False,对称则直接填True</param>
	<param name="ret">返回的三对角阵</param>
	<returns></returns>
	<remarks>本函数采用用豪斯赫尔蒙德变换将实对称阵化为对称三对角</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Adj(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵伴随矩阵
 </summary>
	<param name="K">目标方阵</param>
	<param name="n">方阵K的阶数</param>
	<param name="Ret">获得的伴随矩阵</param>
	<returns></returns>
	<remarks>
 函数采用求代数余子式的方式进行求解,这样就存在一个问题,当目标矩阵的阶数很大的时候,本函数效率是相当慢的。
 建议使用左连翠提出的《伴随矩阵的新求法》里的方法进行求解。里面的方法可以求解非满秩矩阵的伴随矩阵。
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Pow(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 方阵求n次方
 </summary>
	<param name="A">目标方阵</param>
	<param name="m">方阵A的阶数</param>
	<param name="n">方阵A要求的次方数</param>
	<param name="Ret">方阵A进行n次方后获得的返回值</param>
	<returns></returns>
	<remarks>
 注意,本代码没有采用特征值法。而是直接采用2个矩阵相乘的方法(但又不是老老实实地去乘n次),因为用程序去求一个方阵的特征值,
 可能运算复杂度超过了你直接对矩阵相乘的复杂度,至少在n在1000以内大概是这样。
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyRoots2(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Int16,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 求多项式复数根贝尔斯托(Bairstow)算法
 </summary>
	<param name="A">多项式系数矩阵,为1*A_n的矩阵。A中的数据依次为多项式最高项系数,次高项系数……常数项系数</param>
	<param name="A_n">A矩阵的列数或大小</param>
	<param name="LoopNumber">控制的循环次数</param>
	<param name="Erro">误差控制变量</param>
	<param name="Ret">返回的一个n*2的矩阵</param>
	<returns>函数执行完毕返回Ret的行数</returns>
	<remarks>
 对于多项式f(x)=(x^2+2x+3)(x^2-5x+9)=x^4-3x^3+2x^2+3x+27,则A(0,0)=1,A(0,1)=-3,A(0,2)=2,A(0,3)=3,A(0,4)=27,A_n=5.
 当执行下面的函数后,Ret是一个2×2的矩阵,即Ret(0,0)=2,Ret(0,1)=3,Ret(0,0)的2对应于(x^2+2x+3)当中2x的2,Ret(0,1)的3
 对应于(x^2+2x+3)当中常系数的3.用此函数前建议先把重根与实数根处理掉
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Cond(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 矩阵范数Cond及
 </summary>
	<param name="k">目标矩阵</param>
	<param name="m">矩阵的行数</param>
	<returns></returns>
	<remarks>
 函数运行原理是先求矩阵的奇异值,然后用最大的奇异值除以最小的奇异值即得矩阵的范数.对于只有1行或者1列的还得另行处理.这个函数和Matlab的Cond命令一样,即2范数
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Scatter(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 构建散点图矩阵(Scatter Matrix)
 </summary>
	<param name="X">目标矩阵</param>
	<param name="m">X矩阵的行数</param>
	<param name="S">获得的散点矩阵</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyDivEx(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 多项式除法
 </summary>
	<param name="A1">被除数存储多项式系数</param>
	<param name="A2">除数存储多项式系数</param>
	<param name="RetMod">求得的余数多项式系数</param>
	<param name="Ret">求得的多项式商系数</param>
	<param name="Erro">误差控制参数</param>
	<returns></returns>
	<remarks>A1/A2=Ret……RetMod</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.EigTorF(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Double,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵特征值获取特征值向量
 </summary>
	<param name="A1">目标方阵</param>
	<param name="A_m">矩阵A的行数</param>
	<param name="EigValve">方阵A的一个特征值</param>
	<param name="X">函数执行成功后得到的一个特征向量</param>
	<remarks>
 函数原理:已知方阵A的一个特征值为r,则求解方程组(A-r*E)*X=0的解X即为我们的一个特征向量(这里E为单位矩阵),
 我们下面采用的是全选主元素法求解.但是需要注意的是,由于这个方程组是非满秩矩阵,因此在最后处理解的时候,我们
 总是令X解中的一个量为1(当然,你可以设置为其它数,建议设置为非0的数据),然后根据这个量导出其它的量
 
 例子:
 a =
  [ -1.0000000000000   0.00000000000000   0.00000000000000
    8.00000000000000   2.00000000000000   4.00000000000000
    8.00000000000000   3.00000000000000   3.00000000000000 ]

  Math_Matrix_EigTor(a,3,6,x)'上面矩阵a的一个特征值为6,则我们执行如下的命令后求得6的特征向量x如下
 x =
  [ 0.00000000000000
    1.00000000000000
    1.00000000000000 ]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.EigSym(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int16,System.Int16,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 求对称方阵特征值
 </summary>
	<param name="A">对称方阵</param>
	<param name="n">方阵A的阶数</param>
	<param name="Erro1">误差控制变量</param>
	<param name="Ret">返回的特征值</param>
	<param name="Ret_Eigenvectors">返回的特征值对应的特征向量</param>
	<returns></returns>
	<remarks>本代码采用雅可比过关法求解</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Mul(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵相乘
 </summary>
	<param name="K1">K1为矩阵乘法中左边的矩阵</param>
	<param name="K2">为矩阵乘法中右边的矩阵</param>
	<param name="n">代表K1的列数,K2的行数</param>
	<param name="Return_K">执行成功后返回的乘的结果的矩阵</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Sqrt(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵求平方根（sqrtm）
 </summary>
	<param name="K">目标方阵</param>
	<param name="n">方阵K的阶数</param>
	<param name="ks">求得的平方根.即ks*ks=K</param>
	<returns></returns>
	<remarks>
 如果K可以化成K=Inv(P)*diag(R)*P,其中Inv(P)表示P的逆矩阵,diag(R)*为K的特征值组成的对角矩阵,
 那么ks=Inv(P)*diag(R^0.5)*P,根据对角化原理,P*K*Inv(P)=Diag(R),其中Inv(P)是特征值R对应于K
 的特征向量,因此我们的算法=求特征值R,如果所有R均为正实数,则求R对应的特征向量Inv(P),然后讲R每
 个值取根放入对角矩阵对结果相乘即可
 
 例子:
 c =
  [  192.291902022941   136.423323830855  -22.2582056347830   10.9878603820001
    -176.869155076020  -120.047935463800   20.4023293672721  -16.5962890811120
    -21.6722775306690  -60.5101175154120   135.025037886378   5.36535497517843
     31.2279467353500   93.4954928282741  -106.961070363850   59.2865617399033  ]
  
 Math_Matrix_Sqrt(a,4,x)'求a平方根如下,可以进行x*x进行验证
 x =
  [  18.0067271094031   10.1514259204440  -0.80764239842560   0.96148324464486
    -13.6679053566890  -5.69822839694800   0.61394536284630  -1.38430646207250
    -3.17102914065820  -5.10751280313280   11.6191076697081   0.04254172112235
     4.81532683312183   7.92820343443191  -5.38805756370240   8.16305909603188  ]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.RU(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 右极分解，即F=R*U
 </summary>
	<param name="F">目标方阵</param>
	<param name="n">方阵F的阶数</param>
	<param name="R">分解得到的一个正交矩阵</param>
	<param name="U">分解得到的一个对称正定矩阵</param>
	<returns></returns>
	<remarks>
 原理:任何一个可逆方阵均可以唯一的进行右极分解与左极分解,即F=R*U=V*R,其中U^2=T(F)*F,V^2=F*T(F)
【其中T(F)表示F的转置】,则我们可以先通过F求得U或V,然后求R=F*Inv(U)=Inv(V)*F
 
 例子:
 a =
  [ 67.5919611787386     69.8554906388072     38.8768396987006     89.3106376236820
    17.0671848194055     1.12767200969517     31.5601159499772     96.9140055109346
    40.6681714768839     51.0876563615574     86.9885893943666     77.3506165842296
    73.6101518727886     87.9281915202402     23.9508483670423     3.45968334165387 ]
 
 Math_Matrix_RU(a,4,r,u)'进行右极分解得到如下结果
 r =
  [ -0.01806739003090   0.71913865214108  -0.27739456376250   0.63664949766408
     0.45823822484909  -0.57214688695250   0.04612554269224   0.67904624212867
    -0.09675742692290   0.20970810955629   0.95672796354849   0.17708590026142
     0.88326786307616   0.33437989881145   0.07527225185216  -0.31939364294910  ]
 u =
  [ 67.6841644139219  71.9849022272286  26.4791752992667  38.3171883770002
    71.9863924990090  89.6984480926248  36.1676400008128  26.2017432919420
    26.4820423188876  36.1668446729677  75.6890493922576  53.9420595009903
    38.3140405638833  26.2042694530458  53.9408769958847  135.276124831623  ]

 Math_Matrix_VR(a,4,v,r)'进行左极分解得到如下结果
 v =
  [ 95.0902981485406     53.4500420292151     61.1182769307013     57.4613130458042
    53.4438098825046     74.4408296746995     45.9449363126334    -13.1234428571640
    61.1187415068155     45.9418557217637     103.699821171875     34.8450484220080
    57.4619847804705    -13.1244040926920     34.8441839555448     95.1168377384350 ]
 r =
  [ -0.01835015300540     0.71939575068999    -0.27678823268990     0.63628327754090
     0.45799761221593    -0.57191020194030     0.04534571824682     0.67953103744654
    -0.09684035444340     0.20977163011655     0.95676617484504     0.17707600892713
     0.88364856259618     0.33406264059053     0.07478222238892    -0.31912379017620 ]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.VR(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 左极分解
 </summary>
	<param name="F">目标方阵</param>
	<param name="n">方阵F的阶数</param>
	<param name="V">分解得到的一个对称正定矩阵</param>
	<param name="R">分解得到的一个正交矩阵，即F=V*R</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Hamiltonian(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 构建哈密顿矩阵
 </summary>
	<param name="k">m阶的对称矩阵</param>
	<param name="m">矩阵k的行数</param>
	<param name="ret">获得的关于矩阵K的Hamiltonian矩阵</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Lehmer(System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 构建Lehmer矩阵
 </summary>
	<param name="n">构建Lehmer矩阵的阶数</param>
	<param name="k">构建的Lehmer矩阵</param>
	<remarks>Lehmer Matrix</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyMul(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 多项式乘法
 </summary>
	<param name="Mul1">乘数多项式系数</param>
	<param name="Mul2">乘数多项式系数</param>
	<param name="Ret">获得的乘积结果多项式系数</param>
	<returns></returns>
	<remarks>Ret=Mul1*Mul2</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyDiv(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 多项式除法
 </summary>
	<param name="A1">被除数存储多项式系数</param>
	<param name="A2">除数存储多项式系数</param>
	<param name="RetMod">求得的余数多项式系数</param>
	<param name="Ret">求得的多项式商系数</param>
	<param name="Erro">误差控制参数</param>
	<returns></returns>
	<remarks>A1/A2=Ret……RetMod</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyMod(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 多项式求余数
 </summary>
	<param name="A1">被除数多项式系数</param>
	<param name="A2">除数多项式系数</param>
	<param name="Ret">求得的余数多项式系数</param>
	<param name="Erro">误差控制参数</param>
	<returns></returns>
	<remarks>A1%A2=Ret</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.IDFT(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 离散傅里叶变换逆变换
 </summary>
	<param name="k">m*2的矩阵数据(数据点)K里的第一列代表数据的实数部分,第2列代表数据的虚数部分</param>
	<param name="m">矩阵k的行数</param>
	<param name="Number">离散点数</param>
	<param name="X">离散傅里叶变换逆变换的结果矩阵是Number*2的矩阵,X里的第一列代表数据的实数部分,第2列代表数据的虚数部分</param>
	<returns>本函数执行成功返回True.本函数相当于Matlab的快速傅里叶变换逆变换函数IFFT</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.DFT(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 离散傅里叶变换
 </summary>
	<param name="k">m*2的矩阵数据(数据点)K里的第一列代表数据的实数部分,第2列代表数据的虚数部分</param>
	<param name="m">矩阵k的行数</param>
	<param name="Number">离散点数</param>
	<param name="X">离散傅里叶变换的结果矩阵是Number*2的矩阵,X里的第一列代表数据的实数部分,第2列代表数据的虚数部分</param>
	<returns>本函数执行成功返回True.本函数相当于Matlab的快速傅里叶变换函数FFT</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Orth(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 求矩阵的一个正交基Orth
 </summary>
	<param name="k">目标矩阵</param>
	<param name="m">k的行数</param>
	<param name="ret">获得的一个正交基矩阵</param>
	<returns>函数失败返回小于1的数据，成功返回ret的行数</returns>
	<remarks>对矩阵进行svd分解即用SvdSplit得到k=usv*,则s是奇异值矩阵,可以奇异值是否为0获得矩阵的秩r,然后ret就是m*r的矩阵且其就是u里的m*r的部分值</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Magic(System.Int32,System.Double,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 幻方
 </summary>
	<param name="n">幻方的阶数(大于2)</param>
	<param name="start">幻方的中最小的正整数,一般可以设置为1</param>
	<param name="k">获得的幻方</param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Sove2(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 高斯全选主元素法解方程，本函数是求解AX=B这类问题的。函数采用全选主元素的高斯消元法，对于出现非满秩矩阵时(A的化简过程中的A)，
 只要函数有解(可能不止一组解,此时只返回一组解)，本函数都能返回其解
 </summary>
	<param name="A">A_m*n的矩阵</param>
	<param name="b">B_m*1的矩阵</param>
	<param name="A_m"></param>
	<param name="B_m"></param>
	<param name="X">求解得到的矩阵</param>
	<returns></returns>
	<remarks>
 例子:
 a =
  [ 89.7234413259306  12.9170338217714  79.9443395249286  78.1627263772128
    62.8960442556516  63.9951517172135  2.9257326400493   57.119458800703
    83.5902038885235  55.9411662425572  89.4671598865963  33.7297967792162 ]
 
 b =
  [ 65.2027291083721
    54.2041894766522
    63.722165657078   ]
 
 经过本函数后得到的解如下
 x =
  [ -0.826689550370445
    0.737377350436936
    0.646558671079671
    1                 ]
 
 即AX=B
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyGCF(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 多项式提取最大公因式
 </summary>
	<param name="A1">1*A1_n的存储多项式系数的矩阵</param>
	<param name="A1_n">A1的列数</param>
	<param name="A2">为1*A2_n的存储多项式系数的矩阵</param>
	<param name="A2_n">A2的列数</param>
	<param name="Ret">获得的最大公因式多项式系数</param>
	<param name="Erro">误差控制参数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.PolyGCFCall(Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX,System.Int32)">
	<summary>
 求2个多项式的最大公因式Ret，A1为1*A1_n的矩阵，A2为1*A2_n的矩阵。函数执行后返回公因式Ret的大小
 </summary>
	<param name="A1"></param>
	<param name="A1_n"></param>
	<param name="A2"></param>
	<param name="A2_n"></param>
	<param name="Ret"></param>
	<param name="Erro"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Pascal(System.Int32,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 n阶帕斯卡(Pascal)矩阵  
 </summary>
	<param name="n">表示产生帕斯卡(Pascal)矩阵的阶数</param>
	<param name="k">产生的n阶帕斯卡(Pascal)矩阵</param>
	<remarks>Pascal Matrix即产生n阶的帕斯卡矩阵由杨辉三角形表组成的矩阵称为帕斯卡(Pascal)矩阵</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Logical.Convert(System.String)">
	<summary>
 Convert a logical expression into a math expression
 </summary>
	<param name="expression"></param>
	<returns></returns>
	<remarks>
 and -&gt; *
 or -&gt; +
 True -&gt; 1
 False -&gt; 0
 </remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Common.Scan0">
	<summary>
 The first element that in a list or array object.(列表中的第一个元素)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Common.Replace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
	<summary>
	</summary>
	<param name="expression"></param>
	<param name="dict"></param>
	<param name="varList"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Function.SystemPrefixFunctions">
	<summary>
 The mathematics calculation delegates collection with its specific name.
 (具有特定名称的数学计算委托方法的集合) 
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Function.FUNC_NAME_MAX_LENGTH">
	<summary>
 Function name 'ieeeremainder' is the max length of the function name
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Function.X">
	<summary>
 The paramenter of a,b of the user function
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Function.Add(System.String,System.String)">
	<summary>
 Add a user function from the user input from the console or a text file.
 </summary>
	<param name="Name">The name of the user function.</param>
	<param name="Expression">The expression of the user function.</param>
	<remarks>
 function [function name] expression
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Function.Add(System.String)">
	<summary>
 Parsing the use function definition from the user input value on the console 
 and then add it to the function dictionary.
 (从终端上面输入的用户函数的申明语句中解析出表达式，然后将其加入到用户字典中)
 </summary>
	<param name="statement">[function name] expression</param>
	<remarks>function [function name] expression</remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Function.RND(System.Double,System.Double)">
	<summary>
 This function return a random number, you can specific the boundary of the random number in the parameters. 
 </summary>
	<param name="UpBound">
 If this parameter is empty or value is zero, then return the randome number between 0 and 1.
 (如果这个参数为空或者其值为0，那么函数就会返回0和1之间的随机数)
 </param>
	<param name="LowBound"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Function.Internal_getRandomDouble">
	<summary>
 Gets a random number in the region of [0,1]. (获取一个[0,1]区间之中的随机数)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Helpers.Function">
	<summary>
 Mathematics function calculation engine
 (数学函数计算引擎) 
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Mathematical.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Microsoft.VisualBasic.Mathematical.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Microsoft.VisualBasic.Mathematical.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Expression.Evaluate(System.String)">
	<summary>
 Evaluate the a specific mathematics expression string to a double value, the functions, constants, 
 bracket pairs can be include in this expression but the function are those were originally exists 
 in the visualbasic. I'm sorry for this...
 (对一个包含有函数、常数和匹配的括号的一个复杂表达式进行求值，但是对于表达式中的函数而言：仅能够使用在
 VisualBaisc语言中存在的有限的几个数学函数。)  
 </summary>
	<param name="expression"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Expression.GetFunctionName(System.Text.StringBuilder,System.Int32)">
	<summary>
 Get the function name from a expression back from a specific left bracket position. 
 (从表达式的某一个特定的左侧括号的位置往回解析其所处的函数的函数名成)
 </summary>
	<param name="expression">Target expression</param>
	<param name="LBLocation">
 The position of the left bracket char which has a function name on its left side.
 (在其左侧有函数名的某一个指定的左括号在字符串中的位置)
 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Expression">
	<summary>
 Expression Evaluation Engine
 </summary>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Mathematical.MATRIX.GetSize">
	<summary>
 获取矩阵行数
 </summary>
	<returns>函数将返回矩阵的行数</returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Resize(System.Int32,System.Int32)">
	<summary>
 调整矩阵的大小，并保留原有的数据
 </summary>
	<param name="m"></param>
	<param name="n"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Number">
	<summary>
 获取仅包含有一个元素的矩阵对象
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Addition(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 两个矩阵加法算符重载，矩阵元素分别相加
 </summary>
	<param name="a1"></param>
	<param name="a2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Subtraction(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 两个矩阵减法算符重载，矩阵元素分别相减
 </summary>
	<param name="a1"></param>
	<param name="a2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Multiply(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 两个矩阵乘法算符重载，矩阵元素分别相乘，相当于MATLAB中的   .*，要求两个矩阵维数相同，矩阵类不进行个数判断
 </summary>
	<param name="a1"></param>
	<param name="a2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Division(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 两个矩阵除法算符重载，矩阵元素分别相除，相当于MATLAB中的   ./，要求两个矩阵维数相同，矩阵类不进行个数判断
 </summary>
	<param name="a1"></param>
	<param name="a2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Addition(Microsoft.VisualBasic.Mathematical.MATRIX,System.Double)">
	<summary>
 矩阵加实数算符重载，各分量分别加实数
 </summary>
	<param name="a1"></param>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Subtraction(Microsoft.VisualBasic.Mathematical.MATRIX,System.Double)">
	<summary>
 矩阵减实数算符重载，各分量分别减实数
 </summary>
	<param name="a1"></param>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Multiply(Microsoft.VisualBasic.Mathematical.MATRIX,System.Double)">
	<summary>
 矩阵乘以实数算符重载，各分量分别乘以实数
 </summary>
	<param name="a1"></param>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Division(Microsoft.VisualBasic.Mathematical.MATRIX,System.Double)">
	<summary>
 矩阵除以实数算符重载，各分量分别除以实数
 </summary>
	<param name="a1"></param>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Addition(System.Double,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 实数加矩阵算符重载，各分量分别加实数
 </summary>
	<param name="x"></param>
	<param name="a1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Subtraction(System.Double,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 实数减矩阵算符重载，各分量分别减实数
 </summary>
	<param name="x"></param>
	<param name="a1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_Multiply(System.Double,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 实数乘矩阵算符重载，各分量分别乘以实数
 </summary>
	<param name="x"></param>
	<param name="a1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_BitwiseOr(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 数学上的矩阵相乘
 </summary>
	<param name="a1"></param>
	<param name="a2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.op_BitwiseOr(Microsoft.VisualBasic.Mathematical.MATRIX,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 矩阵乘以向量(线性变换），即 b=Ax
 </summary>
	<param name="A"></param>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Transpose(Microsoft.VisualBasic.Mathematical.MATRIX)">
	<summary>
 矩阵转置操作
 </summary>
	<param name="A"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.MATRIX.Transpose">
	<summary>
 获取当前的矩阵对象的转置矩阵
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.MATRIX">
	<summary>
	</summary>
	<remarks>
 Matlab里常用的矩阵运算函数  
 %假设矩阵为A
 det(A)求矩阵行列式
 eig(A)求矩阵特征值或特征向量
 inv(A)矩阵A求逆
 pinv(A)矩阵A求伪逆
 rank(A)求矩阵A的秩
 svd(A)求矩阵A的奇异值或进行奇异值分解
 gsvd(A)求矩阵A的广义奇异值
 trace(A)求矩阵A的迹
 schur(A)对矩阵A进行Schur分解
 hess(A)求矩阵A的Hessenburg标准型
 cond(A)求矩阵A的范数
 chol(A)对矩阵A进行Cholesky分解
 lu(A)对矩阵A进行lu分解
 qr(A)对矩阵A进行QR分解
 poly(A)求矩阵A的特征多项式
 </remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic.Arithmetic">
	<summary>
 +-*/\%^!
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic.OPERATORS">
	<summary>
 A string constant that enumerate all of the arithmetic operators.
 (一个枚举所有的基本运算符的字符串常数) 
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic.DOUBLE_NUMBER_REGX">
	<summary>
 A string constant RegularExpressions that stands a double type number.
 (一个用于表示一个双精度类型的实数的正则表达式)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic.Evaluate(System.Double,System.Double,System.Char)">
	<summary>
 Do a basically arithmetic calculation.
 (进行一次简单的四则运算) 
 </summary>
	<param name="a"></param>
	<param name="b"></param>
	<param name="o">Arithmetic operator(运算符)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic.Factorial(System.Double,System.Double)">
	<summary>
 Calculate the factorial value of a number, as this function is the part of the arithmetic operation 
 delegate type of 'System.Func(Of Double, Double, Double)', so it must keep the form of two double 
 parameter, well, the parameter 'b As Double' is useless.
 (计算某一个数的阶乘值，由于这个函数是四则运算操作委托'System.Func(Of Double, Double, Double)'中的一部分，
 故而本函数保持着两个双精度浮点型数的函数参数的输入形式，也就是说本函数的第二个参数'b'是没有任何用途的)  
 </summary>
	<param name="a">The number that will be calculated(将要被计算的数字)</param>
	<param name="b">Useless parameter 'b'(无用的参数'b')</param>
	<returns>
 Return the factorial value of the number 'a', if 'a' is a negative number then this function 
 return value 1.
 (函数返回参数'a'的阶乘计算值，假若'a'是一个负数的话，则会返回1)
 </returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Helpers.Arithmetic">
	<summary>
 The basics arithmetic operators' definition.
 (基本的四则运算符号的定义)  
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.Operator">
	<summary>
 Arithmetic operator(运算符) 
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.LEFT">
	<summary>
 The number a in the function of "Arithmetic.Evaluate".
 (函数'Arithmetic.Evaluate'中的参数'a')
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.RIGHT">
	<summary>
 The number b in the function of "Arithmetic.Evaluate".
 (函数'Arithmetic.Evaluate'中的参数'b')
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.Evaluate">
	<summary>
 Calculate the value of this simple expression object.
 (计算这一个简单表达式对象的值)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.op_Explicit(Microsoft.VisualBasic.Mathematical.Types.UnitExpression)~System.Double">
	<summary>
 Get the value of this simple expression object.
 (计算这一个简单表达式对象的值)
 </summary>
	<param name="e"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.UnitExpression.op_Implicit(System.String)~Microsoft.VisualBasic.Mathematical.Types.UnitExpression">
	<summary>
 Convert the expression in the string type to this class object type.
 (将字符串形式的简单表达式转换为本对象类型)
 </summary>
	<param name="expression">
 The string type arithmetic expression, please make sure that it must be contains no blank 
 space char exists in this string.
 (字符串类型的算术表达式，请确保本字符串中没有任何的空格符号)
 </param>
	<returns></returns>
	<exception cref="T:System.Data.DataException">Expression contains no number(表达式中没有任何数字)</exception>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Types.UnitExpression">
	<summary>
 A class object stand for a very simple mathematic expression that have no bracket or function.
 It only contains limited operator such as +-*/\%!^ in it.
 (一个用于表达非常简单的数学表达式的对象，在这个所表示的简单表达式之中不能够包含有任何括号或者函数，
 其仅包含有有限的计算符号在其中，例如：+-*/\%^!)
 </summary>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.MetaExpression">
	<summary>
 在<see cref="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.Calculator(System.String)"></see>之中由于移位操作的需要，需要使用类对象可以修改属性的特性来进行正常的计算，所以请不要修改为Structure类型
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.MetaList">
	<summary>
 A simple expression can be view as a list collection of meta expression.
 (可以将一个简单表达式看作为一个元表达式的集合)
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.ToString">
	<summary>
 Debugging displaying in VS IDE
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.Evaluate">
	<summary>
 Evaluate the specific simple expression class object.
 (计算一个特定的简单表达式对象的值) 
 </summary>
	<returns>
 Return the value of the specific simple expression object.
 (返回目标简单表达式对象的值)
 </returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.op_Explicit(Microsoft.VisualBasic.Mathematical.Types.SimpleExpression)~System.Double">
	<summary>
 Evaluate the specific simple expression class object.
 (计算一个特定的简单表达式对象的值) 
 </summary>
	<param name="e">A simple expression that will be evaluated.(待计算的简单表达式对象)</param>
	<returns>
 Return the value of the specific simple expression object.
 (返回目标简单表达式对象的值)
 </returns>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.DOUBLE_NUMBER_REGX">
	<summary>
 A string constant that enumerate all of the arithmetic operators and treat the factoral operator 
 as a part of number as well.
 (一个枚举所有的基本运算符的字符串常数，并且将阶乘运算符也看作为数字的一部分) 
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.op_Implicit(System.String)~Microsoft.VisualBasic.Mathematical.Types.SimpleExpression">
	<summary>
 Convert a string mathematical expression to a simple expression class object.
 (将一个字符串形式的数学表达式转换为一个'SimpleExpression'表达式对象)  
 </summary>
	<param name="expression">A string arithmetic expression to be converted.(一个待转换的数学表达式)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.op_Implicit(System.Text.StringBuilder)~Microsoft.VisualBasic.Mathematical.Types.SimpleExpression">
	<summary>
 Type cast directly!
 </summary>
	<param name="expression"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.ClearOverlapOperator(System.String@)">
	<summary>
	</summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression.Val(System.String)">
	<summary>
 Convert a string expression to double type value.
 (将一个字符串表达式转换为双精度型的数字类型值)
 </summary>
	<param name="expression">
 A string expression that use to stands for a number.
 (一个用于求值的字符串形式的数字表达式)
 </param>
	<returns>
 Return the value of the target evaluated string expression.
 (返回目标字符串所代表的值)
 </returns>
	<remarks></remarks>
</member><member name="T:Microsoft.VisualBasic.Mathematical.Types.SimpleExpression">
	<summary>
 A class object stand for a very simple mathematic expression that have no bracket or function.
 It only contains limited operator such as +-*/\%!^ in it.
 (一个用于表达非常简单的数学表达式的对象，在这个所表示的简单表达式之中不能够包含有任何括号或者函数，
 其仅包含有有限的计算符号在其中，例如：+-*/\%^!)
 </summary>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.VEC.Dim">
	<summary>
 向量维数
 </summary>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Addition(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 两个向量加法算符重载，分量分别相加
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Subtraction(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量减法算符重载，分量分别想减
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Multiply(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量乘法算符重载，分量分别相乘，相当于MATLAB中的  .*算符
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Division(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量除法算符重载，分量分别相除，相当于MATLAB中的   ./算符
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Addition(Microsoft.VisualBasic.Mathematical.VEC,System.Double)">
	<summary>
 向量减加实数，各分量分别加实数
 </summary>
	<param name="v1"></param>
	<param name="a"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Subtraction(Microsoft.VisualBasic.Mathematical.VEC,System.Double)">
	<summary>
 向量减实数，各分量分别减实数
 </summary>
	<param name="v1"></param>
	<param name="a"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Multiply(Microsoft.VisualBasic.Mathematical.VEC,System.Double)">
	<summary>
 向量 数乘，各分量分别乘以实数
 </summary>
	<param name="v1"></param>
	<param name="a"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Division(Microsoft.VisualBasic.Mathematical.VEC,System.Double)">
	<summary>
 向量 数除，各分量分别除以实数
 </summary>
	<param name="v1"></param>
	<param name="a"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Addition(System.Double,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 实数加向量
 </summary>
	<param name="a"></param>
	<param name="v1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Subtraction(System.Double,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 实数减向量
 </summary>
	<param name="a"></param>
	<param name="v1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_Multiply(System.Double,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量 数乘
 </summary>
	<param name="a"></param>
	<param name="v1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_BitwiseOr(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量内积
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_ExclusiveOr(Microsoft.VisualBasic.Mathematical.VEC,Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量外积（相当于列向量，乘以横向量）
 </summary>
	<param name="v1"></param>
	<param name="v2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_OnesComplement(Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 向量模的平方
 </summary>
	<param name="v1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.VEC.op_UnaryNegation(Microsoft.VisualBasic.Mathematical.VEC)">
	<summary>
 负向量 
 </summary>
	<param name="v1"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Microsoft.VisualBasic.Mathematical.Helpers.Variable.Variable(System.String)">
	<summary>
 Add a variable to the dictionary, if the variable is exists then will update its value.
 (向字典之中添加一个变量，假若该变量存在，则更新他的值)
 </summary>
	<param name="Name"></param>
	<remarks>
 const [name] [value]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Variable.Set(System.String,System.String)">
	<summary>
 Add a variable to the dictionary, if the variable is exists then will update its value.
 (向字典之中添加一个变量，假若该变量存在，则更新他的值)
 </summary>
	<param name="Name"></param>
	<remarks>
 const [name] [value]
 </remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Variable.Set(System.String)">
	<summary>
 Add a user const from the input of user on the console.
 </summary>
	<param name="statement"></param>
	<remarks></remarks>
</member><member name="M:Microsoft.VisualBasic.Mathematical.Helpers.Variable.AssignValue(System.String)">
	<summary>
 Assign the new value for a variable
 </summary>
	<param name="statement"></param>
	<remarks></remarks>
</member><member name="F:Microsoft.VisualBasic.Mathematical.MemoryCollection`1._ObjectCacheList">
	<summary>
 [Cache]
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>