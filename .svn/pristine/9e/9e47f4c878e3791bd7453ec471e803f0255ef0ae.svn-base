<?xml version="1.0"?>
<doc>
<assembly>
<name>
RDotNET.Extensions.ShellScriptAPI
</name>
</assembly>
<members>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateCharacterVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new CharacterVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateComplexVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new ComplexVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateIntegerVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new IntegerVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateLogicalVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new LogicalVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateNumericVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new NumericVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateRawVector(System.Collections.Generic.IEnumerable{System.Object})">
 <summary>
 Creates a new RawVector with the specified values.
 </summary>
 <param name="vector">The values.</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateCharacter(System.String)">
 <summary>
 Create a vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateComplex(System.Numerics.Complex)">
 <summary>
 Create a vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateLogical(System.Boolean)">
 <summary>
 Create a vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateNumeric(System.Double)">
 <summary>
 Create a vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateInteger(System.Int32)">
 <summary>
 Create an integer vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateRaw(System.Byte)">
 <summary>
 Create a vector with a single value
 </summary>
 <param name="value">The value</param>
 <returns>The new vector.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateCharacterMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty CharacterMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateComplexMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty ComplexMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateIntegerMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty IntegerMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateLogicalMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty LogicalMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateNumericMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty NumericMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateRawMatrix(System.Int32,System.Int32)">
 <summary>
 Creates a new empty RawMatrix with the specified size.
 </summary>
 <param name="rowCount">The row size.</param>
 <param name="columnCount">The column size.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateCharacterMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new CharacterMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateComplexMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new ComplexMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateIntegerMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new IntegerMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateLogicalMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new LogicalMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateNumericMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new NumericMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateRawMatrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
 <summary>
 Creates a new RawMatrix with the specified values.
 </summary>
 <param name="matrix">The values.</param>
 <returns>The new matrix.</returns>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.API.CreateDataFrame(System.Collections.Generic.IEnumerable{System.Object},System.String[],System.String[],System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Create an R data frame from managed arrays and objects.
 </summary>
 <param name="columns">The columns with the values for the data frame. These must be array of supported types (double, string, bool, integer, byte)</param>
 <param name="columnNames">Column names. default: null.</param>
 <param name="rowNames">Row names. Default null.</param>
 <param name="checkRows">Check rows. See data.frame R documentation</param>
 <param name="checkNames">See data.frame R documentation</param>
 <param name="stringsAsFactors">Should columns of strings be considered as factors (categories). See data.frame R documentation</param>
 <returns></returns>
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice">
 <summary>
 Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files. 
 </summary>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.WriteImage(System.String)">
 <summary>
 Execute the statement that comes from the function <see cref="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.bmp(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)"/>,
 <see cref="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.jpeg(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)"/>,
 <see cref="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.png(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)"/>,
 <see cref="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.tiff(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String)"/>
 </summary>
 <param name="plot"></param>
 <returns></returns>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.bmp(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="plot">画图的语句</param>
 <param name="filename">the name Of the output file, up To 511 characters. The page number Is substituted If a C Integer format Is included In the character String, As In the Default, And tilde-expansion Is performed (see path.expand). (The result must be less than 600 characters Long. See postscript For further details.) </param>
 <param name="width"></param>
 <param name="height"></param>
 <param name="units"></param>
 <param name="pointsize"></param>
 <param name="bg"></param>
 <param name="res"></param>
 <param name="family"></param>
 <param name="restoreConsole"></param>
 <returns></returns>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.jpeg(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="plot">画图的语句</param>
 <param name="filename"></param>
 <param name="width"></param>
 <param name="height"></param>
 <param name="units"></param>
 <param name="pointsize"></param>
 <param name="quality"></param>
 <param name="bg"></param>
 <param name="res"></param>
 <param name="family"></param>
 <param name="restoreConsole"></param>
 <returns></returns>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.png(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="plot">画图的语句</param>
 <param name="filename"></param>
 <param name="width"></param>
 <param name="height"></param>
 <param name="units"></param>
 <param name="pointsize"></param>
 <param name="bg"></param>
 <param name="res"></param>
 <param name="family"></param>
 <param name="restoreConsole"></param>
 <returns></returns>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.GraphicsDevice.tiff(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="plot">画图的语句</param>
 <param name="filename"></param>
 <param name="width"></param>
 <param name="height"></param>
 <param name="units"></param>
 <param name="pointsize"></param>
 <param name="bg"></param>
 <param name="res"></param>
 <param name="family"></param>
 <param name="restoreConsole"></param>
 <returns></returns>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Sqrt(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 abs(x) computes the absolute value of x, sqrt(x) computes the (principal) square root of x, √{x}.
 </summary>
 <param name="x">a numeric or complex vector or array.</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Exp(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 log computes logarithms, by default natural logarithms, log10 computes common (i.e., base 10) logarithms, 
 and log2 computes binary (i.e., base 2) logarithms. 
 The general form log(x, base) computes logarithms with base base.
 log1p(x) computes log(1+x) accurately also for |x| &lt;&lt; 1.
 exp computes the exponential function.
 expm1(x) computes exp(x) - 1 accurately also for |x| &lt;&lt; 1.
 </summary>
 <param name="x">a numeric or complex vector.</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Log(RDotNET.Extensions.ShellScriptAPI.Vector,System.Double)">
 <summary>
 
 </summary>
 <param name="x">a numeric or complex vector.</param>
 <returns></returns>
 <param name="base">a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1).</param>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Trunc(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 Rounding of Numbers
 </summary>
 <param name="x"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.BesselI(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector,System.Boolean)">
 <summary>
 Bessel Functions of integer and fractional order, of first and second kind, J(nu) and Y(nu), 
 and Modified Bessel functions (of first and third kind), I(nu) and K(nu).
 </summary>
 <returns>
 Numeric vector with the (scaled, if expon.scaled = TRUE) values of the corresponding Bessel function.
 The length of the result is the maximum of the lengths of the parameters. All parameters are recycled to that length.
 </returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Sort(RDotNET.Extensions.ShellScriptAPI.Vector,System.Boolean)">
 <summary>
 Sorting or Ordering Vectors
 Sort (or order) a vector or factor (partially) into ascending or descending order. For ordering along more than one variable, e.g., for sorting data frames, see order.
 </summary>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.VectorMath.Order(RDotNET.Extensions.ShellScriptAPI.Vector,System.Boolean,System.Boolean)">
 <summary>
 order returns a permutation which rearranges its first argument into ascending or descending order, breaking ties by further arguments. sort.list is the same, using only one argument.
 </summary>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.Poisson">
 <summary>
 Density, distribution function, quantile function and random generation for the Poisson distribution with parameter lambda.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Poisson.rPois(System.Int32,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 Density, distribution function, quantile function and random generation for the Poisson distribution with parameter lambda.
 </summary>
 <param name="n">number of random values to return.</param>
 <param name="lambda">vector of (non-negative) means.</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Poisson.Dpois(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector,System.Boolean)">
 <summary>
 Density, distribution function, quantile function and random generation for the Poisson distribution with parameter lambda.
 </summary>
 <param name="x">vector of (non-negative integer) quantiles.</param>
 <param name="lambda">vector of (non-negative) means.</param>
 <param name="log">logical; if TRUE, probabilities p are given as log(p).</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.Normal">
 <summary>
 The Normal Distribution
 Density, distribution function, quantile function and random generation for the normal distribution with mean equal to mean and standard deviation equal to sd.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Normal.qnorm(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 
 </summary>
 <param name="p">vector of probabilities.</param>
 <param name="mean">vector of means.</param>
 <param name="sd">vector of standard deviations.</param>
 <param name="lowertail">logical; if TRUE (default), probabilities are P[X ≤ x] otherwise, P[X > x].</param>
 <param name="logp">logical; if TRUE, probabilities p are given as log(p).</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI">
 <summary>
 R function bridge to VisualBasic
 </summary>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Missing``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Does a Formal Argument have a Value?
 missing can be used to test whether a value was specified as an argument to a function.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="x">a formal argument.</param>
 <returns></returns>
 <remarks>
 Missing(x) is only reliable if x has not been altered since entering the function: in particular it will always be false after x &lt;- match.arg(x).
 The example shows how a plotting function can be written to work with either a pair of vectors giving x and y coordinates of points to be plotted or a single vector giving y values to be plotted against their indices.
 Currently missing can only be used in the immediate body of the function that defines the argument, not in the body of a nested function or a local call. This may change in the future.
 This is a ‘special’ primitive function: it must not evaluate its argument.
 </remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Missing``1(``0)">
 <summary>
 Does a Formal Argument have a Value?
 missing can be used to test whether a value was specified as an argument to a function.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="x">a formal argument.</param>
 <returns></returns>
 <remarks>
 Missing(x) is only reliable if x has not been altered since entering the function: in particular it will always be false after x &lt;- match.arg(x).
 The example shows how a plotting function can be written to work with either a pair of vectors giving x and y coordinates of points to be plotted or a single vector giving y values to be plotted against their indices.
 Currently missing can only be used in the immediate body of the function that defines the argument, not in the body of a nested function or a local call. This may change in the future.
 This is a ‘special’ primitive function: it must not evaluate its argument.
 </remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.warning(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Boolean,System.Boolean,System.Object)">
 <summary>
 Generates a warning message that corresponds to its argument(s) and (optionally) the expression or function from which it was called.
 </summary>
 <param name="args">zero or more objects which can be coerced to character (and which are pasted together with no separator) or a single condition object.</param>
 <param name="Call">logical, indicating if the call should become part of the warning message.</param>
 <param name="immediate">logical, indicating if the call should be output immediately, even if getOption("warn") &lt;= 0.</param>
 <param name="noBreaks"></param>
 <param name="domain"></param>
 <returns>The warning message as character string, invisibly.</returns>
 <remarks>
 The result depends on the value of options("warn") and on handlers established in the executing code.
 If a condition object is supplied it should be the only argument, and further arguments will be ignored, with a message.
 warning signals a warning condition by (effectively) calling signalCondition. If there are no handlers or if all handlers return, 
 then the value of warn = getOption("warn") is used to determine the appropriate action. If warn is negative warnings are ignored; 
 if it is zero they are stored and printed after the top–level function has completed; if it is one they are printed as they occur 
 and if it is 2 (or larger) warnings are turned into errors. Calling warning(immediate. = TRUE) turns warn &lt;= 0 into warn = 1 for this call only.
 If warn is zero (the default), a read-only variable last.warning is created. It contains the warnings which can be printed via a call to warnings.
 Warnings will be truncated to getOption("warning.length") characters, default 1000, indicated by [... truncated].
 While the warning is being processed, a muffleWarning restart is available. If this restart is invoked with invokeRestart, then warning returns immediately.
 An attempt is made to coerce other types of inputs to warning to character vectors.
 suppressWarnings evaluates its expression in a context that ignores all warnings.
 </remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Any(RDotNET.Extensions.ShellScriptAPI.BooleanVector,System.Boolean)">
 <summary>
 Given a set of logical vectors, is at least one of the values true?
 </summary>
 <param name="x">zero or more logical vectors. Other objects of zero length are ignored, and the rest are coerced to logical ignoring any class.</param>
 <param name="NaRM"></param>
 <returns>The value is a logical vector of length one.</returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.All(RDotNET.Extensions.ShellScriptAPI.BooleanVector,System.Boolean)">
 <summary>
 Given a set of logical vectors, are all of the values true?
 </summary>
 <param name="x"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Length``1(RDotNET.Extensions.ShellScriptAPI.GenericVector{``0},System.Int32)">
 <summary>
 Get or set the length of vectors (including lists) and factors, and of any other R object for which a method has been defined.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="x">an R object. For replacement, a vector or factor.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Length``1(RDotNET.Extensions.ShellScriptAPI.GenericVector{``0})">
 <summary>
 Get or set the length of vectors (including lists) and factors, and of any other R object for which a method has been defined.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="x">an R object. For replacement, a vector or factor.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Rep(RDotNET.Extensions.ShellScriptAPI.Vector,System.Int32)">
 <summary>
 Replicate Elements of Vectors and Lists
 </summary>
 <param name="x"></param>
 <param name="LengthOut">non-negative integer: the desired length of the output vector.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Rep(RDotNET.Extensions.ShellScriptAPI.BooleanVector,System.Int32)">
 <summary>
 Replicate Elements of Vectors and Lists
 </summary>
 <param name="x"></param>
 <param name="LengthOut">non-negative integer: the desired length of the output vector.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Paste(System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>
 Concatenate Strings, Concatenate vectors after converting to character.
 </summary>
 <param name="args"></param>
 <param name="sep">a character string to separate the terms. Not NA_character_.</param>
 <returns>
 A character vector of the concatenated values. This will be of length zero if all the objects are, unless collapse is non-NULL in which case it is a single empty string.
 If any input into an element of the result is in UTF-8 (and none are declared with encoding "bytes", (see Encoding), that element will be in UTF-8, otherwise in the 
 current encoding in which case the encoding of the element is declared if the current locale is either Latin-1 or UTF-8, at least one of the corresponding inputs 
 (including separators) had a declared encoding and all inputs were either ASCII or declared.
 If an input into an element is declared with encoding "bytes", no translation will be done of any of the elements and the resulting element will have encoding "bytes". 
 If collapse is non-NULL, this applies also to the second, collapsing, phase, but some translation may have been done in pasting object together in the first phase.
 </returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.IfElse``1(RDotNET.Extensions.ShellScriptAPI.BooleanVector,RDotNET.Extensions.ShellScriptAPI.GenericVector{``0},RDotNET.Extensions.ShellScriptAPI.GenericVector{``0})">
 <summary>
 Conditional Element Selection
 ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no depending on whether the element of test is TRUE or FALSE.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="test">an object which can be coerced to logical mode.</param>
 <param name="yes">return values for true elements of test.</param>
 <param name="no">return values for false elements of test.</param>
 <returns>A vector of the same length and attributes (including dimensions and "class") as test and data values from the values of yes or no. The mode of the answer 
 will be coerced from logical to accommodate first any values taken from yes and then any values taken from no.</returns>
 <remarks>If yes or no are too short, their elements are recycled. yes will be evaluated if and only if any element of test is true, and analogously for no.
 Missing values in test give missing values in the result.</remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.Try``1(System.Func{``0},System.Boolean)">
 <summary>
 Try an Expression Allowing Error Recovery
 try is a wrapper to run an expression that might fail and allow the user's code to handle error-recovery.
 </summary>
 <returns></returns>
 <param name="silent">logical: should the report of error messages be suppressed?</param>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Is.Finite(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 is.finite and is.infinite return a vector of the same length as x, indicating which elements are finite (not infinite and not missing) or infinite.
 </summary>
 <param name="x">R object to be tested: the default methods handle atomic vectors.</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.Serialization">
 <summary>
 Convert the R object into a .NET object from the specific type schema information.
 (将R之中的对象内存数据转换为.NET之中指定的对象实体)
 </summary>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.LoadFromStream``1(RDotNET.SymbolicExpression)">
 <summary>
 Deserialize the R object into a specific .NET object. <see cref="T:RDotNET.SymbolicExpression"></see>  =====> <see cref="F:RDotNET.Extensions.ShellScriptAPI.PrimitiveAPI.T"></see>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="RData"></param>
 <returns></returns>
 <remarks>
 反序列化的规则：
 1. S4对象里面的Slot为对象类型之中的属性
 2. 任何对象属性都会被表示为数组
 </remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.LoadRStream(RDotNET.SymbolicExpression,System.Type)">
 <summary>
 Needs your manual type casting in your program. 
 </summary>
 <param name="RData"></param>
 <param name="Type"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.InternalLoadS4Object(RDotNET.SymbolicExpression,System.Type,System.Int32)">
 <summary>
 The recursive operation of the S4Object in R starts from here. this recursive operation will stop when the property value is not a S4Object.
 (这个可能是一个递归的过程，一直解析到各个属性的R类型不再是S4对象类型为止)
 </summary>
 <param name="RData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.InternalValueMapping(System.Object,System.Reflection.PropertyInfo,System.Object@)">
 <summary>
 
 </summary>
 <param name="value"></param>
 <param name="pInfo"></param>
 <param name="obj">对象实例</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.InternalRVectorToNETProperty(System.Type,System.Object,System.Reflection.PropertyInfo,System.Object@)">
 <summary>
 All of the object in R is a vector, so that we needs this function to convert the R vector to a property value.
 </summary>
 <param name="pTypeInfo"></param>
 <param name="value"></param>
 <param name="pInfo"></param>
 <param name="obj"></param>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.InternalMappingCollectionType(System.Object,System.Reflection.PropertyInfo,System.Object@,System.Type)">
 <summary>
 Object() to T()()
 </summary>
 <param name="value"></param>
 <param name="pInfo"></param>
 <param name="obj"></param>
 <param name="pTypeInfo"></param>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Serialization.InternalLoadFromStream(RDotNET.SymbolicExpression,System.Type,System.Int32)">
 <summary>
 Load the R symbolic expression data recursivly start from here.
 </summary>
 <param name="RData"></param>
 <param name="TypeInfo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:RDotNET.Extensions.ShellScriptAPI.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:RDotNET.Extensions.ShellScriptAPI.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:RDotNET.Extensions.ShellScriptAPI.Skellam">
 <summary>
 Skellam distribution
 
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Skellam.DskellamSp(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector,System.Boolean)">
 <summary>
 Density, distribution function, quantile function and random number generation for the Skellam distribution with parameters lambda1 and lambda2. 
 </summary>
 <param name="x">vector of quantiles.</param>
 <param name="lambda1">vectors of (non-negative) means.</param>
 <param name="lambda2">vectors of (non-negative) means.</param>
 <param name="log">logical; if TRUE, probabilities p are given as log(p).</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="P:RDotNET.Extensions.ShellScriptAPI.GenericVector`1.Dim">
 <summary>
 向量维数
 </summary>
 <remarks></remarks>
</member>
<member name="P:RDotNET.Extensions.ShellScriptAPI.GenericVector`1.ElementValues(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 
 </summary>
 <param name="a">只有一个元素的</param>
 <param name="b">只有一个元素的</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Addition(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 两个向量加法算符重载，分量分别相加
 </summary>
 <param name="v1"></param>
 <param name="v2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Subtraction(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量减法算符重载，分量分别想减
 </summary>
 <param name="v1"></param>
 <param name="v2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Multiply(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量乘法算符重载，分量分别相乘，相当于MATLAB中的  .*算符
 </summary>
 <param name="v1"></param>
 <param name="v2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Division(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量除法算符重载，分量分别相除，相当于MATLAB中的   ./算符
 </summary>
 <param name="v1"></param>
 <param name="v2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Addition(RDotNET.Extensions.ShellScriptAPI.Vector,System.Double)">
 <summary>
 向量减加实数，各分量分别加实数
 </summary>
 <param name="v1"></param>
 <param name="a"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Subtraction(RDotNET.Extensions.ShellScriptAPI.Vector,System.Double)">
 <summary>
 向量减实数，各分量分别减实数
 </summary>
 <param name="v1"></param>
 <param name="a"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Multiply(RDotNET.Extensions.ShellScriptAPI.Vector,System.Double)">
 <summary>
 向量 数乘，各分量分别乘以实数
 </summary>
 <param name="v1"></param>
 <param name="a"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Division(RDotNET.Extensions.ShellScriptAPI.Vector,System.Double)">
 <summary>
 向量 数除，各分量分别除以实数
 </summary>
 <param name="v1"></param>
 <param name="a"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Addition(System.Double,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 实数加向量
 </summary>
 <param name="a"></param>
 <param name="v1"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Subtraction(System.Double,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 实数减向量
 </summary>
 <param name="a"></param>
 <param name="v1"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_Multiply(System.Double,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量 数乘
 </summary>
 <param name="a"></param>
 <param name="v1"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_BitwiseOr(RDotNET.Extensions.ShellScriptAPI.Vector,RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量内积
 </summary>
 <param name="v1"></param>
 <param name="v2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_OnesComplement(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 向量模的平方
 </summary>
 <param name="v1"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RDotNET.Extensions.ShellScriptAPI.Vector.op_UnaryNegation(RDotNET.Extensions.ShellScriptAPI.Vector)">
 <summary>
 负向量 
 </summary>
 <param name="v1"></param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
