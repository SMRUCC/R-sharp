Imports Microsoft.VisualBasic.CommandLine.Reflection
Imports QuartzTypeLib
Imports Microsoft.VisualBasic.Scripting.MetaData

<[PackageNamespace]("winmm.dll",
                    Description:="<pre>' ------------------------------------------------------------------------
'
'    WIN32API.TXT -- Win32 API Declarations for Visual Basic
'
'              Copyright (C) 1994 Microsoft Corporation
'
'
'  This file contains only the Const, Type,
' and Declare statements for  Win32 APIs.
'
'  You have a royalty-free right to use, modify, reproduce and distribute
'  this file (and/or any modified version) in any way you find useful,
'  provided that you agree that Microsoft has no warranty, obligation or
'  liability for its contents.  Refer to the Microsoft Windows Programmer's
'  Reference for further information.
'
' ------------------------------------------------------------------------</pre>",
                    Publisher:="Copyright (C) 2014 Microsoft Corporation",
                    Url:="http://www.microsoft.com/en-us/download/details.aspx?id=12427")>
Public Module WinMM

    ''' <summary>
    ''' DirectShow组件的抽象接口，整个播放器的核心部件
    ''' </summary>
    ''' <remarks></remarks>
    Public Class DirectShow : Implements IDisposable

        Public ReadOnly Property MediaControl As IMediaControl
        Public ReadOnly Property MediaPosition As IMediaPosition
        Public ReadOnly Property BasicAudio As IBasicAudio
        Public ReadOnly Property url As String

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="position">当前的播放位置</param>
        Public Event Tick(position As Double)

        Dim _tickThread As New Microsoft.VisualBasic.Parallel.UpdateThread(1000, AddressOf __tick)

        Private Sub __tick()
            RaiseEvent Tick(MediaPosition.CurrentPosition)
        End Sub

        Public Sub Seek(position As Double)
            MediaPosition.CurrentPosition = position
        End Sub

        Public Function RenderFile(path As String) As DirectShow
            Try
                Call [Stop]()
                Call __renderFile(path)
            Catch ex As Exception
                Throw New Exception(path.ToFileURL, ex)
            End Try

            Return Me
        End Function

        Private Sub __renderFile(path As String)
            Me._MediaControl = New FilgraphManager
            Me._MediaControl.RenderFile(path)
            Me._BasicAudio = MediaControl
            Me._MediaPosition = MediaControl
            Me._url = path
        End Sub

        Public ReadOnly Property Duration As Double
            Get
                Return MediaPosition.Duration
            End Get
        End Property

        Public Sub Dispose() Implements System.IDisposable.Dispose
            On Error Resume Next

            Call [Stop]()

            Me._MediaPosition = Nothing
            Me._BasicAudio = Nothing
            Me._MediaControl = Nothing
        End Sub

        Public Overrides Function ToString() As String
            Return url.ToFileURL
        End Function

        Public Function IsNull() As Boolean
            Return (BasicAudio Is Nothing OrElse MediaControl Is Nothing OrElse MediaPosition Is Nothing)
        End Function

        Public Sub [Stop]()
            On Error Resume Next
            MediaControl.Stop()
            Call _tickThread.Stop()
        End Sub

        Public Sub Pause()
            On Error Resume Next
            MediaControl.Pause()
            Call _tickThread.Stop()
        End Sub

        Public Sub Play()
            On Error Resume Next
            MediaControl.Run()
            Call _tickThread.Start()
        End Sub

        Public ReadOnly Property State As Long
            Get
                Dim TimeOut As Long, s As Long = 0
                MediaControl.GetState(TimeOut, s)
                Return s
            End Get
        End Property
    End Class

    ''' <summary>
    ''' 将数字转化为mm:ss的时间格式
    ''' </summary>
    ''' <param name="intTime"></param>
    ''' <returns></returns>
    Public Function Int2_strTime(intTime As Integer) As String
        Dim mm As Integer = Int(intTime \ 60)
        Dim ss As Integer = intTime Mod 60

        Return mm.ToString + ":" + Format(ss, "00").ToString
    End Function

    <ImportsConstant> Public Const SND_APPLICATION = &H80 ' look for application specific association
    <ImportsConstant> Public Const SND_ALIAS = &H10000 ' name is a WIN.INI [sounds] entry
    <ImportsConstant> Public Const SND_ALIAS_ID = &H110000 ' name is a WIN.INI [sounds] entry identifier
    <ImportsConstant> Public Const SND_ASYNC = &H1 ' play asynchronously
    <ImportsConstant> Public Const SND_FILENAME = &H20000 ' name is a file name
    <ImportsConstant> Public Const SND_LOOP = &H8 ' loop the sound until next sndPlaySound
    <ImportsConstant> Public Const SND_MEMORY = &H4 ' lpszSoundName points to a memory file
    <ImportsConstant> Public Const SND_NODEFAULT = &H2 ' silence not default, if sound not found
    <ImportsConstant> Public Const SND_NOSTOP = &H10 ' don't stop any currently playing sound
    <ImportsConstant> Public Const SND_NOWAIT = &H2000 ' don't wait if the driver is busy
    <ImportsConstant> Public Const SND_PURGE = &H40 ' purge non-static events for task
    <ImportsConstant> Public Const SND_RESOURCE = &H40004 ' name is a resource name or atom
    <ImportsConstant> Public Const SND_SYNC = &H0 ' play synchronously (default)

    <ExportAPI("PlaySoundA")>
    Public Declare Function PlaySound Lib "winmm.dll" Alias "PlaySoundA" (lpszName As String, hModule As Integer, dwFlags As Integer) As Integer

    <ExportAPI("Invoke.DirectShow")>
    Public Function InvokeDirectShow(<Parameter("media.url", "The file path of the media file on your file system.")> filename As String) As Double
        Dim Device As WinMM.DirectShow = New DirectShow
        Call Device.RenderFile(filename)
        Call Device.Play()
        Return 0
    End Function
End Module
