<?xml version="1.0"?>
<doc>
<assembly>
<name>
Oracle.LinuxCompatibility.LibMySQL
</name>
</assembly>
<members>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator">
 <summary>
 Automatically generates visualbasic source code from the SQL schema dump document.(根据SQL文档生成Visual Basic源代码)
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.SQL_CREATE_TABLE">
 <summary>
 Parsing the create table statement in the SQL document.
 </summary>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.LoadSQLDoc(System.String)">
 <summary>
 Loading the table schema from a specific SQL doucment.
 </summary>
 <param name="Path"></param>
 <returns></returns>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.InternalCreateSchema(System.String[],System.String,System.String,System.String)">
 <summary>
 Create a MySQL table schema object.
 </summary>
 <param name="Fields"></param>
 <param name="TableName"></param>
 <param name="PrimaryKey"></param>
 <param name="CreateTableSQL"></param>
 <returns></returns>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.FIELD_COMMENTS">
 <summary>
 Regex expression for parsing the comments of the field in a table definition.
 </summary>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.InternalCreateDataType(System.String)">
 <summary>
 Mapping the MySQL database type and visual basic data type 
 </summary>
 <param name="TypeDef"></param>
 <returns></returns>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.GenerateCode(System.Collections.Generic.IEnumerable{Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table})">
 <summary>
 Convert each table schema into a visualbasic class object definition.
 </summary>
 <param name="SqlDoc"></param>
 <returns></returns>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.InternalGenerateCode(System.Collections.Generic.IEnumerable{Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 Generate the source code file from the table schema dumping
 </summary>
 <param name="SqlDoc"></param>
 <param name="Head"></param>
 <param name="FileName"></param>
 <param name="TableSql"></param>
 <returns></returns>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.GenerateTableClass(Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table,System.String)">
 <summary>
 Generate the class object definition to mapping a table in the mysql database.
 </summary>
 <param name="Table"></param>
 <param name="DefSql"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CodeGenerator.GenerateCode(System.String)">
 <summary>
 Convert the sql definition into the visualbasic source code.
 </summary>
 <param name="SqlDump">The SQL dumping file path.(Dump sql文件的文件路径)</param>
 <returns>VisualBasic source code</returns>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.My.CommonExtensions._Assembly">
 <summary>
 调用本模块的程序集的可执行文件的完整的文件路径
 </summary>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.My.CommonExtensions.ExePath">
 <summary>
 Get the exe file full path string.(调用本模块的程序集的可执行文件的完整的文件路径)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Extensions">
 <summary>
 Common extension methods library for convenient the programming job.
 </summary>
 <remarks></remarks>  
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.NormalizeXMLString(System.String)">
 <summary>
 对Xml文件之中的特殊字符进行转义处理
 </summary>
 <param name="str"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ToFileURL(System.String)">
 <summary>
 Gets the URL type file path.(获取URL类型的文件路径)
 </summary>
 <param name="Path"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetAnonymousTypeList``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 You can using this method to create a empty list for the specific type of anonymous type object.
 (使用这个方法获取得到匿名类型的列表数据集合对象)
 </summary>
 <typeparam name="TAnonymousType"></typeparam>
 <param name="typedef">The temp object which was created anonymous.(匿名对象的集合)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.StringSplit(System.String,System.String,System.Boolean)">
 <summary>
 This method is used to replace most calls to the Java String.split method.
 </summary>
 <param name="source"></param>
 <param name="regexDelimiter"></param>
 <param name="trimTrailingEmptyStrings"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetDelegateInvokeEntryPoint(System.Object)">
 <summary>
 Get the method reflection entry point for a anonymous lambda expression.(当函数返回Nothing的时候说明目标对象不是一个函数指针)
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ToMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>
 Convert the data collection into a matrix value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="collection">The elements number in each collection should be agreed!(要求集合之中的每一列之中的数据的元素数目都相等)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MatrixToVectorList``1(``0[0:,0:])">
 <summary>
 Convert the matrix data into a collection of collection data type.(将矩阵对象转换为集合的集合的类型)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="MAT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SlideWindowHandle`1">
 <summary>
 滑窗操作的数据模型
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SlideWindowHandle`1.p">
 <summary>
 在创建的滑窗的队列之中当前的窗口对象的位置
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SlideWindowHandle`1.Left">
 <summary>
 当前窗口在原始的序列之中的左端起始位点
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SlideWindowHandle`1.Length">
 <summary>
 窗口长度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.CreateSlideWindows``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
 <summary>
 Create a collection of slide Windows data for the target collection object.(创建一个滑窗集合)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="data"></param>
 <param name="slideWindowSize">窗口的大小</param>
 <param name="offset">在序列之上移动的步长</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Extensions.NIL">
 <summary>
 Chr(0): NULL char
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SplitCollection``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 将目标集合之中的数据按照<paramref name="splitCount"></paramref>参数分配到子集合之中
 </summary>
 <typeparam name="T"></typeparam>
 <param name="collection"></param>
 <param name="splitCount">每一个子集合之中的元素的数目</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Invoke(System.Diagnostics.Process)">
 <summary>
 本方法会执行外部命令并等待其执行完毕，函数返回状态值
 </summary>
 <param name="Process"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.RandomDouble">
 <summary>
 Gets a random number in the region of [0,1]. (获取一个[0,1]区间之中的随机数)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.FileExists(System.String)">
 <summary>
 Check if the target file object is exists on your file system or not.
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetElementCounts``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Gets the element counts in the target data collection, if the collection object is nothing or empty 
 then this function will returns ZERO, others returns Collection.Count.(返回一个数据集合之中的元素的数目，
 假若这个集合是空值或者空的，则返回0，其他情况则返回Count拓展函数的结果) 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetString(System.String,System.Char)">
 <summary>
 获取""或者其他字符所包围的字符串的值
 </summary>
 <param name="s"></param>
 <param name="wrapper"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SetValueMethod``1(``0@,``0)">
 <summary>
 Value assignment to the target variable. 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="var"></param>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Free``1(``0@)">
 <summary>
 Free this variable pointer in the memory.(销毁本对象类型在内存之中的指针)
 </summary>
 <typeparam name="T">假若该对象类型实现了<see cref="T:System.IDisposable"></see>接口，则函数还会在销毁前调用该接口的销毁函数</typeparam>
 <param name="obj"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Pause(System.String)">
 <summary>
 Pause the console program.
 </summary>
 <param name="Prompted"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ParseDouble(System.String)">
 <summary>
 使用正则表达式解析目标字符串对象之中的一个实数
 </summary>
 <param name="s"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ReadUltraLargeTextFile(System.String,System.Text.Encoding)">
 <summary>
 当所被读取的文本文件的大小超过了<see cref="T:System.Text.StringBuilder"></see>的上限的时候，就需要使用本方法进行读取操作了。<paramref name="Path">目标文件</paramref>必须是已经存在的文件
 </summary>
 <param name="Path">目标文件必须是已经存在的文件</param>
 <param name="Encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Collection2GenericIEnumerable(System.Type)">
 <summary>
 Try convert the type specific collection data type into a generic enumerable collection data type.(尝试将目标集合类型转换为通用的枚举集合类型)
 </summary>
 <param name="Type">The type specific collection data type.(特定类型的集合对象类型，当然也可以是泛型类型)</param>
 <returns>If the target data type is not a collection data type then the original data type will be returns and the function displays a warning message.</returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SavePackage(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
 <summary>
 Save the binary data into the filesystem.(保存二进制数据包值文件系统)
 </summary>
 <param name="ChunkBuffer">The binary bytes data of the target package's data.(目标二进制数据)</param>
 <param name="SavePath">The saved file path of the target binary data chunk.(目标二进制数据包所要进行保存的文件名路径)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ModifyValue``1(``0,System.Action)">
 <summary>
 Execute a property modify method and then return the target instance object.(修改目标对象的属性之后返回目标对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ModifyValue``1(System.Reflection.PropertyInfo,``0,System.Func{System.Object,System.Object})">
 <summary>
 Modify target object property value using a <paramref name="valueModifier">specific value provider</paramref> and then return original instance object.
 (修改目标对象的属性之后返回目标对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.FlushMemory">
 <summary>
 Rabbish collection to free the junk memory.(垃圾回收)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MatrixToVector``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>
 Merge the target array collection into one collection.(将目标数组的集合合并为一个数组)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MatrixToUltraLargeVector``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 Merge the target array collection into one collection.(将目标数组的集合合并为一个数组，这个方法是提供给超大的集合的，即元素的数目非常的多的，即超过了<see cref="T:System.Int32"></see>的上限值)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MatrixTranspose``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 将矩阵之中的元素进行行列位置的互换
 </summary>
 <typeparam name="T"></typeparam>
 <param name="MAT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MatrixTransposeIgnoredDimensionAgreement``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>
 将矩阵之中的元素进行行列位置的互换，请注意，假若长度不一致的话，会按照最短的元素来转置，故而使用本函数可能会造成一些信息的丢失
 </summary>
 <typeparam name="T"></typeparam>
 <param name="MAT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Intersection(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
 <summary>
 求交集
 </summary>
 <param name="Chunkbuffer"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.StdError(System.Collections.Generic.IEnumerable{System.Double})">
 <summary>
 求取该数据集的标准差
 </summary>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Description(System.Enum)">
 <summary>
 Get the description data from a enum type value, if the target have no <see cref="T:System.ComponentModel.DescriptionAttribute"></see> attribute data 
 then function will return the string value from the ToString() function.
 </summary>
 <param name="e"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.TrimNull``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Remove all of the null object in the target object collection
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.RandomizeElements``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Return a collection with randomize element position in <paramref name="Collection">the original collection</paramref>.(从原有序序列中获取一个随机元素的序列)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetFirstValue``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Get the value of the first element, if the collection is null or empty then return nothing as default value
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.CopyTo``1(``0,``0@)">
 <summary>
 Copy the value in <paramref name="value"></paramref> into target variable <paramref name="target"></paramref> and then return the target variable.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="value"></param>
 <param name="target"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.TakeRandomly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 随机的在目标集合中选取指定数目的子集合
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <param name="Counts">当目标数目大于或者等于目标集合的数目的时候，则返回目标集合</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ToStringArray``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Convert target object type collection into a string array using the Object.ToString() interface function.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Union(System.String[],System.String[])">
 <summary>
 Get a sub set of the string data which is contains in both collection <paramref name="strArray1"></paramref> and <paramref name="strArray2"></paramref>
 </summary>
 <param name="strArray1"></param>
 <param name="strArray2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SwapWith``1(``0@,``0@)">
 <summary>
 Swap the value in the two variables.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj1"></param>
 <param name="obj2"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SwapItem``1(System.Collections.Generic.List{``0}@,``0,``0)">
 <summary>
 Swap the two item position in the target <paramref name="List">list</paramref>.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="obj_1"></param>
 <param name="obj_2"></param>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.MoveNext(System.Int32@)">
 <summary>
 <paramref name="p"></paramref> plus one and then return its previous value.
 </summary>
 <param name="p"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Sequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 获取某一个集合的下标的集合
 </summary>
 <typeparam name="T">集合中的元素为任意类型的</typeparam>
 <param name="Collection">目标集合对象</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Takes``1(System.Collections.Generic.IEnumerable{``0},System.Int32[],System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <param name="IndexCollection">所要获取的目标对象的下表的集合</param>
 <param name="reversedSelect">是否为反向选择</param>
 <param name="OffSet">当进行反选的时候，本参数将不会起作用</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.InternalReversedTakeSelected``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
 <summary>
 反选，即将所有不出现在<paramref name="indexs"></paramref>之中的元素都选取出来
 </summary>
 <typeparam name="T"></typeparam>
 <param name="coll"></param>
 <param name="indexs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Sequence(System.Int32)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n">大于或者等于0的一个数，当小于0的时候会出错</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Sequence(System.Int64)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Sequence(System.UInt32)">
 <summary>
 产生指定数目的一个递增序列
 </summary>
 <param name="n"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Join``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 向一个列表对象之中批量添加一个对象的集合
 </summary>
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
 <summary>
 将目标键值对对象的集合转换为一个字典对象
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 This object collection is a null object or contains zero count items.(判断某一个对象集合是否为空)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Collection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SaveTo(System.String,System.String,System.Text.Encoding)">
 <summary>
 Write the text file data into a file which was specific by the <paramref name="Path"></paramref> value, 
 this function not append the new data onto the target file.
 (将目标文本字符串写入到一个指定路径的文件之中，但是不会在文件末尾追加新的数据)
 </summary>
 <param name="Path"></param>
 <param name="TextValue"></param>
 <param name="Encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.SaveTo(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.Encoding)">
 <summary>
 将目标字符串数据全部写入到文件之中，当所写入的文件位置之上没有父文件夹存在的时候，会自动创建文件夹
 </summary>
 <param name="array"></param>
 <param name="path"></param>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetXml``1(``0)">
 <summary>
 Serialization the target object type into a XML document.(将一个类对象序列化为XML文档)
 </summary>
 <typeparam name="T">The type of the target object data should be a class object.(目标对象类型必须为一个Class)</typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.LoadXml``1(System.String,System.Text.Encoding)">
 <summary>
 
 </summary>
 <typeparam name="T"></typeparam>
 <param name="XmlFile">XML文件的文件路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Serialize``1(``0,System.String)">
 <summary>
 使用二进制序列化保存一个对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Load``1(System.String)">
 <summary>
 使用反二进制序列化从指定的文件之中加载一个对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.CreateObjectFromXml``1(System.String,System.Boolean)">
 <summary>
 Generate a specific type object from a xml document stream.(使用一个XML文本内容创建一个XML映射对象)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Xml">This parameter value is the document text of the xml file, not the file path of the xml file.(是Xml文件的文件内容而非文件路径)</param>
 <param name="ThrowEx">Should this program throw the exception when the xml deserialization error happens? 
 if False then this function will returns a null value instead of throw exception.
 (在进行Xml反序列化的时候是否抛出错误，默认抛出错误，否则返回一个空对象)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.CreateObjectFromXmlSegment``1(System.String)">
 <summary>
 使用一个XML文本内容的一个片段创建一个XML映射对象
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Xml">是Xml文件的文件内容而非文件路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.π(System.Collections.Generic.IEnumerable{System.Double})">
 <summary>
 获取一个实数集合中所有元素的积
 </summary>
 <param name="Elements"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Extensions.ILLEGAL_PATH_CHARACTERS_ENUMERATION">
 <summary>
 枚举所有非法的路径字符
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.NormalizePathString(System.String,System.Boolean)">
 <summary>
 将目标字符串之中的非法的字符替换为"_"符号以成为正确的文件名字符串
 </summary>
 <param name="str"></param>
 <param name="OnlyASCII">当本参数为真的时候，仅26个字母，0-9数字和下划线_以及小数点可以被保留下来</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Removes``1(System.Collections.Generic.List{``0}@,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Remove all of the element in the <paramref name="collection"></paramref> from target <paramref name="List">list</paramref>
 </summary> 
 <typeparam name="T"></typeparam>
 <param name="List"></param>
 <param name="collection"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.GetValue(System.String)">
 <summary>
 获取两个尖括号之间的内容
 </summary>
 <param name="strData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.Get_PageContent(System.String,System.UInt32,System.Boolean)">
 <summary>
 Get the html page content from a website request or a html file on the local filesystem.
 </summary>
 <param name="url">web http request url or a file path handle</param>
 <param name="RequestTimeOut">发生错误的时候的重试的次数</param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Extensions.DownloadFile(System.String,System.String)">
 <summary>
 download the file from <paramref name="strUrl"></paramref> to <paramref name="SavedPath">local file</paramref>.
 </summary>
 <param name="strUrl"></param>
 <param name="SavedPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.SqlGenerateMethods">
 <summary>
 请注意，Where语句之中的变量总是<see cref="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table.Index"></see>属性值中的值
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.SQL._InternalSchemaInfo">
 <summary>
 The table schema of the sql generation target.(用于生成SQL语句的表结构属性)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Update`1">
 <summary>
 
 </summary>
 <remarks>
 Example SQL:
 
 UPDATE `TableName` 
 SET `Field1`='value', `Field2`='value' 
 WHERE `IndexField`='index';
 </remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Update`1.UpdateSQL">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Insert`1">
 <summary>
 
 </summary>
 <remarks>
 Example SQL:
 
 INSERT INTO `TableName` (`Field1`, `Field2`, `Field3`) VALUES ('1', '1', '1');
 </remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Insert`1.InsertSQL">
 <summary>
 INSERT INTO `TableName` (`Field1`, `Field2`, `Field3`, ...) VALUES ('{0}', '{1}', '{2}', ...);
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Insert`1.Generate(`0)">
 <summary>
 Generate the INSERT sql command of the instance of the specific type of 'Schema'.
 (生成特定的'Schema'数据类型实例的 'INSERT' sql命令)
 </summary>
 <param name="value">The instance to generate this command of type 'Schema'</param>
 <returns>INSERT sql text</returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.Delete`1">
 <summary>
 
 </summary>
 <typeparam name="Schema"></typeparam>
 <remarks>
 Example SQL:
 
 DELETE FROM `TableName` WHERE `IndexFieldName`='value';
 </remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.CreateTableSQL">
 <summary>
 Generate the CREATE TABLE sql of the target table schema class object.
 (生成目标数据表模式的"CREATE TABLE" sql语句)
 </summary>
 <remarks>
 Example SQL:
 
 CREATE  TABLE `Table_Name` (
   `Field1` INT UNSIGNED ZEROFILL NOT NULL DEFAULT 4444 ,
   `Field2` VARCHAR(45) BINARY NOT NULL DEFAULT '534534' ,
   `Field3` INT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT ,
  PRIMARY KEY (`Field1`, `Field2`, `Field3`) ,
  UNIQUE INDEX `Field1_UNIQUE` (`Field1` ASC) ,
  UNIQUE INDEX `Field2_UNIQUE` (`Field2` ASC) );
 </remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.SQL.CreateTableSQL.FromSchema(Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table)">
 <summary>
 Generate the 'CREATE TABLE' sql command.
 (生成'CREATE TABLE' sql命令)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.MySqlDbType">
 <summary>
 Enum all of the data type in the mysql database.
 (枚举MYSQL数据库中所有的数据类型)
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.MySqlDbType.BigInt">
 <summary>
 Long
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DbAttribute">
 <summary>
 The field attribute in the database.
 (数据库中的字段的属性)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DatabaseField">
 <summary>
 Custom attribute class to mapping the field in the data table.
 (用于映射数据库中的表中的某一个字段的自定义属性类型)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DatabaseField.Name">
 <summary>
 Get or set the name of the database field.
 (获取或者设置数据库表中的字段的名称)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DatabaseField.op_Explicit(Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DatabaseField)~System.String">
 <summary>
 Get the field name property.
 (获取字段名)
 </summary>
 <param name="DbField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.TableName.op_Explicit(Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.TableName)~System.String">
 <summary>
 Get the table name property.(获取表名称)
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DataType">
 <summary>
 Please notice that some data type in mysql database is not allow combine with some specific field 
 attribute, and I can't find out this potential error in this code. So, when your schema definition can't 
 create a table then you must check this combination is correct or not in the mysql.
 (请注意：在MySql数据库中有一些数据类型是不能够和一些字段的属性组合使用的，我不能够在本代码中检查出此潜在
 的错误。故，当你定义的对象类型无法创建表的时候，请检查你的字段属性的组合是否有错误？)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.DataType.ToMySqlDateTimeString(System.DateTime)">
 <summary>
 可能由于操作系统的语言或者文化的差异，直接使用<see cref="T:System.DateTime"></see>的ToString方法所得到的字符串可能会在一些环境配置之下
 无法正确的插入MySQL数据库之中，所以需要使用本方法在将对象实例进行转换为SQL语句的时候进行转换为字符串
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.Unique">
 <summary>
 The value of this field is unique in a data table.
 (本字段的值在一张表中唯一)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.PrimaryKey">
 <summary>
 This field is the primary key of the data table.
 (本字段是本数据表的主键)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.NotNULL">
 <summary>
 The value of this field can not be null.
 (本字段的值不能为空)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.Unsigned">
 <summary>
 This filed value can not be a negative number, it just works on the number type.
 (本字段的值不能够是一个负数值，本属性仅适用于数值类型)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbAttributes.AutoIncrement">
 <summary>
 When we create new row in the table, this field's value will plus 1 automatically. 
 (本属性指出本字段值将会自动加1当我们在表中新添加一条记录的时候)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table">
 <summary>
 The table schema that we define on the custom attributes of a Class.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table.TableName">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table.Index">
 <summary>
 The index field when execute the update/delete sql.
 </summary>
 <remarks>Long/Integer first, then the Text is second, the primary key is the last consideration.</remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table.IndexProperty">
 <summary>
 The index field when execute the update/delete sql.
 </summary>
 <remarks>Long/Integer first, then the Text is second, the primary key is the last consideration.</remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Table.Indexing(System.String,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo[])">
 <summary>
 Indexing from the primary key attributed field.
 </summary>
 <param name="Index2"></param>
 <param name="Indexproperty2"></param>
 <param name="ItemProperty"></param>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Reflection.Schema.Field.PropertyInfo">
 <summary>
 The property information of this custom database field attribute. 
 </summary>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1">
 <summary>
 A table object of a specific table schema that mapping a table object in the mysql database.
 (一个映射到MYSQL数据库中的指定的表之上的表对象)
 </summary>
 <typeparam name="Schema">
 The table shcema which define on the custom attribut of a class.
 (定义于一个类之中的自定义属性的表结构)
 </typeparam>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.DeleteSQL">
 <summary>
 'DELETE' sql text generator of a record that type of schema.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.InsertSQL">
 <summary>
 'INSERT' sql text generator of a record that type of schema.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.UpdateSQL">
 <summary>
 'UPDATE' sql text generator of a record that type of schema.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Transaction">
 <summary>
 The sql transaction that will be commit to the mysql database.
 (将要被提交至MYSQL数据库之中的SQL事务集)
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.TableSchema">
 <summary>
 The structure definition information which was parsed from the custom attribut on a class object.
 (从一个类对象上面的自定义属性之中解析出来的表结构信息)
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1._InternalListData">
 <summary>
 DataSet of the table in the database.
 (数据库的表之中的数据集)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.ErrorMessage">
 <summary>
 The error information that come from MYSQL database server.
 (来自于MYSQL数据库服务器的错误信息)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.ListData">
 <summary>
 DataSet of the table in the database. Do not edit the data directly from this property...
 (数据库的表之中的数据集，请不要直接在这个属性之上修改数据)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.GetHandle(`0)">
 <summary>
 Get a specific record in the dataset by compaired the UNIQUE_INDEX field value.
 (通过值唯一的索引字段来获取一个特定的数据记录)
 </summary>
 <param name="Record"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Delete(`0)">
 <summary>
 Delete a record in the table. Please notice that, in order to decrease the usage of CPU and networking traffic, the 
 change is not directly affect on the database server, it will be store as a delete sql in the memory and accumulated 
 as a transaction, the change of the database will not happen until you call the commit method to make this change 
 permanently in the database.
 (删除表中的一条记录。请注意：为了减少服务器的计算资源和网络流量的消耗，在使用本模块对数据库作出修改的时候，更改并不会直接提
 交至数据库之中的，而是将修改作为一条SQL语句存储下来并对这些命令进行积累作为一个事务存在，即数据库不会受到修改的影响直到你将
 本事务提交至数据库服务器之上)
 </summary>
 <param name="Record"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Insert(`0)">
 <summary>
 Insert a record in the table. Please notice that, in order to decrease the usage of CPU and networking traffic, the 
 change is not directly affect on the database server, it will be store as a insert sql in the memory and accumulated 
 as a transaction, the change of the database will not happen until you call the commit method to make this change 
 permanently in the database.
 (向表中插入一条新记录。请注意：为了减少服务器的计算资源和网络流量的消耗，在使用本模块对数据库作出修改的时候，更改并不会直接提
 交至数据库之中的，而是将修改作为一条SQL语句存储下来并对这些命令进行积累作为一个事务存在，即数据库不会受到修改的影响直到你将
 本事务提交至数据库服务器之上)
 </summary>
 <param name="Record"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Update(`0)">
 <summary>
 Update a record in the table. Please notice that, in order to decrease the usage of CPU and networking traffic, the 
 change is not directly affect on the database server, it will be store as a update sql in the memory and accumulated 
 as a transaction, the change of the database will not happen until you call the commit method to make this change 
 permanently in the database.
 (修改表中的一条记录。请注意：为了减少服务器的计算资源和网络流量的消耗，在使用本模块对数据库作出修改的时候，更改并不会直接提
 交至数据库之中的，而是将修改作为一条SQL语句存储下来并对这些命令进行积累作为一个事务存在，即数据库不会受到修改的影响直到你将
 本事务提交至数据库服务器之上)
 </summary>
 <param name="Record"></param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Fetch(System.Int32)">
 <summary>
 Load the data from database server. Please notice that: every time you call this function, the transaction will be commit to the database server in.
 (从数据库服务器之中加载数据，请注意：每一次加载数据都会将先前的所积累下来的事务提交至数据库服务器之上)
 </summary>
 <param name="Count">
 The count of the record that will be read from the server. Notice: Zero or negative is stands for 
 load all records in the database.
 (从数据库中读取的记录数目。请注意：值0和负数值都表示加载数据库的表中的所有数据)
 </param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Query(System.String)">
 <summary>
 Query a data table using Reflection.(使用反射机制来查询一个数据表)
 </summary>
 <param name="SQL">Sql 'SELECT' query statement.(Sql 'SELECT' 查询语句)</param>
 <returns>The target data table.(目标数据表)</returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.Commit">
 <summary>
 Commit the transaction to the database server to make the change permanently.
 (将事务集提交至数据库服务器之上以永久的修改数据库) 
 </summary>
 <returns>The transaction commit is successfully or not.(事务集是否被成功提交)</returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.op_Explicit(Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable{`0})~System.Collections.Generic.List{`0}">
 <summary>
 Convert the mapping object to a dataset
 </summary>
 <param name="schema"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.op_Implicit(Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri)~Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable{`0}">
 <summary>
 Initialize the mapping from a connection object
 </summary>
 <param name="uri"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.op_Implicit(System.String)~Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable{`0}">
 <summary>
 Initialize the mapping from a connection string
 </summary>
 <param name="uri"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable`1.op_Implicit(System.Xml.Linq.XElement)~Oracle.LinuxCompatibility.MySQL.Client.Reflection.DataTable{`0}">
 <summary>
 Initialize the mapping from a connection string
 </summary>
 <param name="xml"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbReflector.ReadOne``1(System.Data.DataTableReader)">
 <summary>
 假若目标数据表不存在数据记录，则会返回空值
 </summary>
 <typeparam name="ItemType"></typeparam>
 <param name="Reader"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbReflector.Query``1(System.String,System.String@)">
 <summary>
 Query a data table using Reflection.(使用反射机制来查询一个数据表，请注意，假若返回的是Nothing，则说明发生了错误)
 </summary>
 <typeparam name="ItemType">Mapping schema to our data table.(对我们的数据表的映射类型)</typeparam>
 <param name="SQL">Sql 'SELECT' query statement.(Sql 'SELECT' 查询语句)</param>
 <returns>The target data table.(目标数据表)</returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbReflector.op_Implicit(System.String)~Oracle.LinuxCompatibility.MySQL.Client.Reflection.DbReflector">
 <summary>
 
 </summary>
 <param name="s_cnn">MySql connection string.(MySql连接字符串)</param>
 <returns></returns>
 <remarks>
 Example: 
 http://localhost:8080/client?user=username%password=password%database=database
 </remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri">
 <summary>
 The connection parameter for the MYSQL database server.(MySQL服务器的远程连接参数)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.IPAddress">
 <summary>
 The server IP address, you can using 'localhost' to specific the local machine.(服务器的IP地址，可以使用localhost来指代本机)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.ServicesPort">
 <summary>
 The port number of the remote database server.(数据库服务器的端口号)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.Database">
 <summary>
 Using &lt;database_name>.(数据库的名称)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.GetConnectionString">
 <summary>
 Get a connection string for the connection establish of a client to a mysql database 
 server using the specific paramenter that was assigned by the user.
 (获取一个由用户指定连接参数的用于建立客户端和MySql数据库服务器之间的连接的连接字符串)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.CreateObject(System.String)">
 <summary>
 Create a mysql connection using the connection uri
 </summary>
 <param name="url"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.op_Explicit(Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri)~System.String">
 <summary>
 Conver the ConnectionHelper object to a mysql connection string using 
 the specific parameter which assigned by the user.
 (将使用由用户指定连接参数的连接生成器转换为Mysql数据库的连接字符串)
 </summary>
 <param name="uri"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.op_Implicit(System.String)~Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri">
 <summary>
 
 </summary>
 <param name="url">MySql connection string.(MySql连接字符串)</param>
 <returns></returns>
 <remarks>
 Example: 
 http://localhost:8080/client?user=username%password=password%database=database
 </remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.GenerateUri(System.Func{System.String,System.String})">
 <summary>
 重新生成链接url字符串
 </summary>
 <returns></returns>
 <param name="passwordEncryption">用户自定义的密码加密信息</param>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri.CreateObject(System.String,System.Func{System.String,System.String})">
 <summary>
 从配置数据之中加载数据库的连接信息
 </summary>
 <param name="url"></param>
 <param name="passwordDecryption"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CommonExtension.GetAttribute``1(System.Reflection.PropertyInfo)">
 <summary>
 Get the specific type of custom attribute from a property.
 (从一个属性对象中获取特定的自定义属性对象)
 </summary>
 <typeparam name="T">The type of the custom attribute.(自定义属性的类型)</typeparam>
 <param name="Property">Target property object.(目标属性对象)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.CommonExtension.GetDbDataType(System.Type)">
 <summary>
 Get the data type of a field in the data table.
 (获取数据表之中的某一个域的数据类型)
 </summary>
 <param name="Type"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Oracle.LinuxCompatibility.MySQL.Client.MySQL">
 <summary>
 MySql database server connection module.
 (与MySql数据库服务器之间的通信操作的封装模块)
 </summary>
 <remarks></remarks>
</member>
<member name="E:Oracle.LinuxCompatibility.MySQL.Client.MySQL.ThrowException">
 <summary>
 A error occurred during the execution of a sql command or transaction.
 (在执行SQL命令或者提交一个事务的时候发生了错误) 
 </summary>
 <param name="Ex">
 The detail information of the occurred error.
 (所发生的错误的详细信息)
 </param>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.MySQL._InternalUriMySqlConn">
 <summary>
 A Formatted connection string using for the connection established to the database server. 
 </summary>
 <remarks></remarks>
</member>
<member name="F:Oracle.LinuxCompatibility.MySQL.Client.MySQL._InternalSQLErrMsg">
 <summary>
 A Formatted connection string using for the connection established to the database server. 
 </summary>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.GetErrMessage">
 <summary>
 Get the error message that throw by the client during the time of the sql command executed.
 (获取在客户端执行Sql命令的时候所捕获的错误的描述)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.Connect(Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri,System.Boolean)">
 <summary>
 Connect to the database server using a assigned mysql connection 
 helper object.
 (使用一个由用户所指定参数的连接字符串生成器来打开一个对服务器的连接) 
 </summary>
 <param name="MySQLConnection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.Connect(System.String)">
 <summary>
 Connect to the database server using a assigned mysql connection string.
 (使用一个由用户所制定的连接字符串连接MySql数据库服务器) 
 </summary>
 <param name="ConnectionString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.ExecuteScalar``1(System.String)">
 <summary>
 Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
 </summary>
 <returns></returns>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.Execute(System.String)">
 <summary>
 Execute a DML/DDL sql command and then return the row number that the row was affected 
 by this command, and you should open a connection to a database server before you call 
 this function. 
 (执行一个DML/DDL命令并且返回受此命令的执行所影响的行数，你应该在打开一个数据库服务器的连接之
 后调用本函数，执行SQL语句发生错误时会返回负数)
 </summary>
 <param name="Sql">DML/DDL sql command, not a SELECT command(DML/DDL 命令，而非一个SELECT语句)</param>
 <returns>
 Return the row number that was affected by the DML/DDL command, if the databse 
 server connection is interrupt or errors occurred during the executes, this 
 function will return a negative number.
 (返回受DML/DDL命令所影响的行数，假若数据库服务器断开连接或者在命令执行的期间发生错误，
 则这个函数会返回一个负数)
 </returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.Fetch(System.String)">
 <summary>
 Execute a 'SELECT' query command and then returns the query result of this sql command.
 (执行一个'SELECT'查询命令之后返回本查询命令的查询结果) 
 </summary>
 <param name="Sql"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.CommitTransaction(System.String)">
 <summary>
 Commit a transaction command collection to the database server and then return the 
 result that this transaction is commit successfully or not. 
 (向数据库服务器提交一个事务之后返回本事务是否被成功提交)
 </summary>
 <param name="Transaction"></param>
 <returns>
 Return the result that this transaction is commit succeedor not.
 (返回本事务是否被成功提交至数据库服务器)
 </returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.Ping">
 <summary>
 Test the connection of the client to the mysql database server and then 
 return the communication delay time between the client and the server. 
 This function should be call after you connection to a database server.
 (测试客户端和MySql数据库服务器之间的通信连接并且返回二者之间的通信延时。
 这个函数应该在你连接上一个数据库服务器之后进行调用，-1值表示客户端与服务器之间通信失败.)
 </summary>
 <returns>当函数返回一个负数的时候，表明Ping操作失败，即无数据库服务器连接</returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.op_Implicit(System.String)~Oracle.LinuxCompatibility.MySQL.Client.MySQL">
 <summary>
 Open a mysql connection using a specific connection string
 </summary>
 <param name="strUri">The mysql connection string</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Oracle.LinuxCompatibility.MySQL.Client.MySQL.op_Implicit(Oracle.LinuxCompatibility.MySQL.Client.ConnectionUri)~Oracle.LinuxCompatibility.MySQL.Client.MySQL">
 <summary>
 Open a  mysql  connection using a connection helper object
 </summary>
 <param name="uri_obj">The connection helper object</param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
